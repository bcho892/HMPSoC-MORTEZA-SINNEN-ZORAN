
nios_hmpsoc.elf:     file format elf32-littlenios2
nios_hmpsoc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08008020

Program Header:
    LOAD off    0x00001000 vaddr 0x08008000 paddr 0x08008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08008020 paddr 0x08008020 align 2**12
         filesz 0x00001ab8 memsz 0x00001ab8 flags r-x
    LOAD off    0x00002ad8 vaddr 0x08009ad8 paddr 0x08009bc8 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00002cb8 vaddr 0x08009cb8 paddr 0x08009cb8 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08008000  08008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08008020  08008020  00002bc8  2**0
                  CONTENTS
  2 .text         00001948  08008020  08008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000170  08009968  08009968  00002968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  08009ad8  08009bc8  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  08009cb8  08009cb8  00002cb8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  08009cc8  08009cc8  00002bc8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002bc8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000003a8  00000000  00000000  00002bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000492b  00000000  00000000  00002f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001c1d  00000000  00000000  000078c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001ef7  00000000  00000000  000094e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000514  00000000  00000000  0000b3d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000012e5  00000000  00000000  0000b8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002a25  00000000  00000000  0000cbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000f5f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000560  00000000  00000000  0000f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00010d7d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00010d80  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00010d83  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00010d84  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00010d85  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00010d8e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00010d97  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00010da0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000034  00000000  00000000  00010daa  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005a162  00000000  00000000  00010dde  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08008000 l    d  .entry	00000000 .entry
08008020 l    d  .exceptions	00000000 .exceptions
08008020 l    d  .text	00000000 .text
08009968 l    d  .rodata	00000000 .rodata
08009ad8 l    d  .rwdata	00000000 .rwdata
08009cb8 l    d  .bss	00000000 .bss
08009cc8 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_hmpsoc_bsp//obj/HAL/src/crt0.o
08008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009084 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08009ad8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
08009820 g     F .text	0000002c alt_main
08008fd4 g     F .text	00000080 _puts_r
08009bc8 g       *ABS*	00000000 __flash_rwdata_start
08008f88 g     F .text	0000004c printf
080083a8 g     F .text	00000440 .hidden __divsf3
08008d88 g     F .text	00000070 .hidden __fixsfsi
08009bc0 g     O .rwdata	00000004 jtag_uart
08009928 g     F .text	00000008 altera_nios2_gen2_irq_init
08008000 g     F .entry	0000001c __reset
08008020 g       *ABS*	00000000 __flash_exceptions_start
08009cb8 g     O .bss	00000004 errno
08009cc0 g     O .bss	00000004 alt_argv
08011bb8 g       *ABS*	00000000 _gp
080088a4 g     F .text	000004e4 .hidden __subsf3
08009054 g     F .text	00000014 puts
08008f4c g     F .text	0000003c _printf_r
080082ec g     F .text	00000064 .hidden __udivsi3
08009930 g     F .text	00000038 alt_icache_flush
08009bb8 g     O .rwdata	00000004 _global_impure_ptr
08009cc8 g       *ABS*	00000000 __bss_end
08009904 g     F .text	00000018 alt_dcache_flush_all
08009bc8 g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
0800984c g     F .text	00000060 write
080087e8 g     F .text	000000bc .hidden __gtsf2
08009ad8 g       *ABS*	00000000 __ram_rodata_end
08008350 g     F .text	00000058 .hidden __umodsi3
08009cc8 g       *ABS*	00000000 end
0800d000 g       *ABS*	00000000 __alt_stack_pointer
08008ee8 g     F .text	00000064 .hidden __clzsi2
080098d0 g     F .text	00000034 altera_avalon_jtag_uart_write
080090f0 g     F .text	00000524 ___vfprintf_internal_r
08008020 g     F .text	0000004c _start
080098cc g     F .text	00000004 alt_sys_init
08009ad8 g       *ABS*	00000000 __ram_rwdata_start
08009968 g       *ABS*	00000000 __ram_rodata_start
08009cc8 g       *ABS*	00000000 __alt_stack_base
08009630 g     F .text	000000b8 __sfvwrite_small_dev
08009cb8 g       *ABS*	00000000 __bss_start
0800806c g     F .text	00000128 main
08009cbc g     O .bss	00000004 alt_envp
08009bc4 g     O .rwdata	00000004 alt_errno
080081f4 g     F .text	00000084 .hidden __divsi3
08009968 g       *ABS*	00000000 __flash_rodata_start
080098ac g     F .text	00000020 alt_irq_init
080099d4 g     O .rodata	00000100 .hidden __clz_tab
080087e8 g     F .text	000000bc .hidden __gesf2
080096e8 g     F .text	00000058 _write_r
08009bbc g     O .rwdata	00000004 _impure_ptr
08009cc4 g     O .bss	00000004 alt_argc
08008020 g       *ABS*	00000000 __ram_exceptions_start
08009bc8 g       *ABS*	00000000 _edata
08009cc8 g       *ABS*	00000000 _end
08008020 g       *ABS*	00000000 __ram_exceptions_end
08008df8 g     F .text	000000f0 .hidden __floatunsisf
08008278 g     F .text	00000074 .hidden __modsi3
0800d000 g       *ABS*	00000000 __alt_data_end
08008194 g     F .text	00000060 .hidden __fixunssfsi
0800801c g       .entry	00000000 _exit
08009068 g     F .text	0000001c strlen
0800991c g     F .text	0000000c alt_icache_flush_all
08009614 g     F .text	0000001c __vfprintf_internal
08009740 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8008000:	00808014 	movui	r2,512
#endif

0:
    initi r2
 8008004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8008008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800800c:	00bffd16 	blt	zero,r2,8008004 <_gp+0xffff644c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8008010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8008014:	08600814 	ori	at,at,32800
    jmp r1
 8008018:	0800683a 	jmp	at

0800801c <_exit>:
 800801c:	00000000 	call	0 <__alt_mem_onchip_memory-0x8008000>

Disassembly of section .text:

08008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8008020:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 8008024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8008028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800802c:	00bffd16 	blt	zero,r2,8008024 <_gp+0xffff646c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8008030:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 8008034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
 8008038:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800803c:	d686ee14 	ori	gp,gp,7096
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8008040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8008044:	10a72e14 	ori	r2,r2,40120

    movhi r3, %hi(__bss_end)
 8008048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800804c:	18e73214 	ori	r3,r3,40136

    beq r2, r3, 1f
 8008050:	10c00326 	beq	r2,r3,8008060 <_start+0x40>

0:
    stw zero, (r2)
 8008054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8008058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800805c:	10fffd36 	bltu	r2,r3,8008054 <_gp+0xffff649c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8008060:	80097400 	call	8009740 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8008064:	80098200 	call	8009820 <alt_main>

08008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8008068:	003fff06 	br	8008068 <_gp+0xffff64b0>

0800806c <main>:
static float calculate_frequency(uint32_t cycles);

static uint16_t decimal_to_hex(uint16_t value);

int main()
{
 800806c:	defffc04 	addi	sp,sp,-16
    printf("Hello from Nios II!\n");
 8008070:	01020074 	movhi	r4,2049
static float calculate_frequency(uint32_t cycles);

static uint16_t decimal_to_hex(uint16_t value);

int main()
{
 8008074:	dc400115 	stw	r17,4(sp)
    printf("Hello from Nios II!\n");
 8008078:	21265a04 	addi	r4,r4,-26264
        // ALT_CI_BIGLARI_SSEG_0(datain >> 28);

        switch (datain >> 28)
        {
        case (CORRELATION_CODE):
            printf("Correlation Detected: Value: %u\n", datain & 0x0FFFFFFF);
 800807c:	04440034 	movhi	r17,4096
static float calculate_frequency(uint32_t cycles);

static uint16_t decimal_to_hex(uint16_t value);

int main()
{
 8008080:	dfc00315 	stw	ra,12(sp)
 8008084:	dc800215 	stw	r18,8(sp)
 8008088:	dc000015 	stw	r16,0(sp)
        // ALT_CI_BIGLARI_SSEG_0(datain >> 28);

        switch (datain >> 28)
        {
        case (CORRELATION_CODE):
            printf("Correlation Detected: Value: %u\n", datain & 0x0FFFFFFF);
 800808c:	8c7fffc4 	addi	r17,r17,-1

static uint16_t decimal_to_hex(uint16_t value);

int main()
{
    printf("Hello from Nios II!\n");
 8008090:	80090540 	call	8009054 <puts>
    {

        uint32_t datain = ALT_CI_BIGLARI_READ_0;
        // ALT_CI_BIGLARI_SSEG_0(datain >> 28);

        switch (datain >> 28)
 8008094:	01000244 	movi	r4,9
 8008098:	018002c4 	movi	r6,11
 800809c:	00c00204 	movi	r3,8
    // SEND_DATA(0x00000000);

    for (;;)
    {

        uint32_t datain = ALT_CI_BIGLARI_READ_0;
 80080a0:	000bc032 	custom	0,r5,zero,zero
        // ALT_CI_BIGLARI_SSEG_0(datain >> 28);

        switch (datain >> 28)
 80080a4:	2804d73a 	srli	r2,r5,28
 80080a8:	11000626 	beq	r2,r4,80080c4 <main+0x58>
 80080ac:	11800926 	beq	r2,r6,80080d4 <main+0x68>
 80080b0:	10fffb1e 	bne	r2,r3,80080a0 <_gp+0xffff64e8>
            printf("Peak Detected: Cock Cycles: %u\n", frequency);
//            printf("Frequency: %d Hz\n", (int));
            ALT_CI_BIGLARI_SSEG_0(decimal_to_hex(frequency));
            break;
        case (SIGNAL_INFO_CODE):
            printf("Signal reading: %u\n", datain & 0x0FFFFFFF);
 80080b4:	01020074 	movhi	r4,2049
 80080b8:	2c4a703a 	and	r5,r5,r17
 80080bc:	21267004 	addi	r4,r4,-26176
 80080c0:	00003206 	br	800818c <main+0x120>
        // ALT_CI_BIGLARI_SSEG_0(datain >> 28);

        switch (datain >> 28)
        {
        case (CORRELATION_CODE):
            printf("Correlation Detected: Value: %u\n", datain & 0x0FFFFFFF);
 80080c4:	01020074 	movhi	r4,2049
 80080c8:	2c4a703a 	and	r5,r5,r17
 80080cc:	21265f04 	addi	r4,r4,-26244
 80080d0:	00002e06 	br	800818c <main+0x120>
            break;
        case (PEAK_INFO_CODE):;
            uint32_t cycles = (datain & 0x0FFFFFFF);
            uint16_t frequency = (uint16_t)calculate_frequency(cycles);
 80080d4:	2c48703a 	and	r4,r5,r17
 80080d8:	8008df80 	call	8008df8 <__floatunsisf>
 80080dc:	01130ff4 	movhi	r4,19519
 80080e0:	100b883a 	mov	r5,r2
 80080e4:	212f0804 	addi	r4,r4,-17376
 80080e8:	80083a80 	call	80083a8 <__divsf3>
 80080ec:	1009883a 	mov	r4,r2
 80080f0:	80081940 	call	8008194 <__fixunssfsi>
            printf("Peak Detected: Cock Cycles: %u\n", frequency);
 80080f4:	14bfffcc 	andi	r18,r2,65535
 80080f8:	01020074 	movhi	r4,2049
 80080fc:	900b883a 	mov	r5,r18
 8008100:	21266804 	addi	r4,r4,-26208
 8008104:	8008f880 	call	8008f88 <printf>
//            printf("Frequency: %d Hz\n", (int));
            ALT_CI_BIGLARI_SSEG_0(decimal_to_hex(frequency));
 8008108:	9009883a 	mov	r4,r18
 800810c:	0140fa04 	movi	r5,1000
 8008110:	80082ec0 	call	80082ec <__udivsi3>
 8008114:	01400284 	movi	r5,10
 8008118:	113fffcc 	andi	r4,r2,65535
 800811c:	80083500 	call	8008350 <__umodsi3>
 8008120:	9009883a 	mov	r4,r18
 8008124:	10bfffcc 	andi	r2,r2,65535
 8008128:	01401904 	movi	r5,100
 800812c:	1020933a 	slli	r16,r2,12
 8008130:	80082ec0 	call	80082ec <__udivsi3>
 8008134:	01400284 	movi	r5,10
 8008138:	113fffcc 	andi	r4,r2,65535
 800813c:	80083500 	call	8008350 <__umodsi3>
 8008140:	10bfffcc 	andi	r2,r2,65535
 8008144:	1004923a 	slli	r2,r2,8
 8008148:	9009883a 	mov	r4,r18
 800814c:	01400284 	movi	r5,10
 8008150:	80a0b03a 	or	r16,r16,r2
 8008154:	80083500 	call	8008350 <__umodsi3>
 8008158:	9009883a 	mov	r4,r18
 800815c:	01400284 	movi	r5,10
 8008160:	80a0b03a 	or	r16,r16,r2
 8008164:	80082ec0 	call	80082ec <__udivsi3>
 8008168:	01400284 	movi	r5,10
 800816c:	113fffcc 	andi	r4,r2,65535
 8008170:	80083500 	call	8008350 <__umodsi3>
 8008174:	10bfffcc 	andi	r2,r2,65535
 8008178:	1004913a 	slli	r2,r2,4
 800817c:	8084b03a 	or	r2,r16,r2
 8008180:	10bfffcc 	andi	r2,r2,65535
 8008184:	1005c072 	custom	1,r2,r2,zero
            break;
 8008188:	003fc206 	br	8008094 <_gp+0xffff64dc>
        case (SIGNAL_INFO_CODE):
            printf("Signal reading: %u\n", datain & 0x0FFFFFFF);
 800818c:	8008f880 	call	8008f88 <printf>
            break;
 8008190:	003fc006 	br	8008094 <_gp+0xffff64dc>

08008194 <__fixunssfsi>:
 8008194:	defffd04 	addi	sp,sp,-12
 8008198:	dc000015 	stw	r16,0(sp)
 800819c:	0413c034 	movhi	r16,20224
 80081a0:	800b883a 	mov	r5,r16
 80081a4:	dc400115 	stw	r17,4(sp)
 80081a8:	dfc00215 	stw	ra,8(sp)
 80081ac:	2023883a 	mov	r17,r4
 80081b0:	80087e80 	call	80087e8 <__gesf2>
 80081b4:	1000070e 	bge	r2,zero,80081d4 <__fixunssfsi+0x40>
 80081b8:	8809883a 	mov	r4,r17
 80081bc:	8008d880 	call	8008d88 <__fixsfsi>
 80081c0:	dfc00217 	ldw	ra,8(sp)
 80081c4:	dc400117 	ldw	r17,4(sp)
 80081c8:	dc000017 	ldw	r16,0(sp)
 80081cc:	dec00304 	addi	sp,sp,12
 80081d0:	f800283a 	ret
 80081d4:	800b883a 	mov	r5,r16
 80081d8:	8809883a 	mov	r4,r17
 80081dc:	80088a40 	call	80088a4 <__subsf3>
 80081e0:	1009883a 	mov	r4,r2
 80081e4:	8008d880 	call	8008d88 <__fixsfsi>
 80081e8:	00e00034 	movhi	r3,32768
 80081ec:	10c5883a 	add	r2,r2,r3
 80081f0:	003ff306 	br	80081c0 <_gp+0xffff6608>

080081f4 <__divsi3>:
 80081f4:	20001b16 	blt	r4,zero,8008264 <__divsi3+0x70>
 80081f8:	000f883a 	mov	r7,zero
 80081fc:	28001616 	blt	r5,zero,8008258 <__divsi3+0x64>
 8008200:	200d883a 	mov	r6,r4
 8008204:	29001a2e 	bgeu	r5,r4,8008270 <__divsi3+0x7c>
 8008208:	00800804 	movi	r2,32
 800820c:	00c00044 	movi	r3,1
 8008210:	00000106 	br	8008218 <__divsi3+0x24>
 8008214:	10000d26 	beq	r2,zero,800824c <__divsi3+0x58>
 8008218:	294b883a 	add	r5,r5,r5
 800821c:	10bfffc4 	addi	r2,r2,-1
 8008220:	18c7883a 	add	r3,r3,r3
 8008224:	293ffb36 	bltu	r5,r4,8008214 <_gp+0xffff665c>
 8008228:	0005883a 	mov	r2,zero
 800822c:	18000726 	beq	r3,zero,800824c <__divsi3+0x58>
 8008230:	0005883a 	mov	r2,zero
 8008234:	31400236 	bltu	r6,r5,8008240 <__divsi3+0x4c>
 8008238:	314dc83a 	sub	r6,r6,r5
 800823c:	10c4b03a 	or	r2,r2,r3
 8008240:	1806d07a 	srli	r3,r3,1
 8008244:	280ad07a 	srli	r5,r5,1
 8008248:	183ffa1e 	bne	r3,zero,8008234 <_gp+0xffff667c>
 800824c:	38000126 	beq	r7,zero,8008254 <__divsi3+0x60>
 8008250:	0085c83a 	sub	r2,zero,r2
 8008254:	f800283a 	ret
 8008258:	014bc83a 	sub	r5,zero,r5
 800825c:	39c0005c 	xori	r7,r7,1
 8008260:	003fe706 	br	8008200 <_gp+0xffff6648>
 8008264:	0109c83a 	sub	r4,zero,r4
 8008268:	01c00044 	movi	r7,1
 800826c:	003fe306 	br	80081fc <_gp+0xffff6644>
 8008270:	00c00044 	movi	r3,1
 8008274:	003fee06 	br	8008230 <_gp+0xffff6678>

08008278 <__modsi3>:
 8008278:	20001716 	blt	r4,zero,80082d8 <__modsi3+0x60>
 800827c:	000f883a 	mov	r7,zero
 8008280:	2005883a 	mov	r2,r4
 8008284:	28001216 	blt	r5,zero,80082d0 <__modsi3+0x58>
 8008288:	2900162e 	bgeu	r5,r4,80082e4 <__modsi3+0x6c>
 800828c:	01800804 	movi	r6,32
 8008290:	00c00044 	movi	r3,1
 8008294:	00000106 	br	800829c <__modsi3+0x24>
 8008298:	30000a26 	beq	r6,zero,80082c4 <__modsi3+0x4c>
 800829c:	294b883a 	add	r5,r5,r5
 80082a0:	31bfffc4 	addi	r6,r6,-1
 80082a4:	18c7883a 	add	r3,r3,r3
 80082a8:	293ffb36 	bltu	r5,r4,8008298 <_gp+0xffff66e0>
 80082ac:	18000526 	beq	r3,zero,80082c4 <__modsi3+0x4c>
 80082b0:	1806d07a 	srli	r3,r3,1
 80082b4:	11400136 	bltu	r2,r5,80082bc <__modsi3+0x44>
 80082b8:	1145c83a 	sub	r2,r2,r5
 80082bc:	280ad07a 	srli	r5,r5,1
 80082c0:	183ffb1e 	bne	r3,zero,80082b0 <_gp+0xffff66f8>
 80082c4:	38000126 	beq	r7,zero,80082cc <__modsi3+0x54>
 80082c8:	0085c83a 	sub	r2,zero,r2
 80082cc:	f800283a 	ret
 80082d0:	014bc83a 	sub	r5,zero,r5
 80082d4:	003fec06 	br	8008288 <_gp+0xffff66d0>
 80082d8:	0109c83a 	sub	r4,zero,r4
 80082dc:	01c00044 	movi	r7,1
 80082e0:	003fe706 	br	8008280 <_gp+0xffff66c8>
 80082e4:	00c00044 	movi	r3,1
 80082e8:	003ff106 	br	80082b0 <_gp+0xffff66f8>

080082ec <__udivsi3>:
 80082ec:	200d883a 	mov	r6,r4
 80082f0:	2900152e 	bgeu	r5,r4,8008348 <__udivsi3+0x5c>
 80082f4:	28001416 	blt	r5,zero,8008348 <__udivsi3+0x5c>
 80082f8:	00800804 	movi	r2,32
 80082fc:	00c00044 	movi	r3,1
 8008300:	00000206 	br	800830c <__udivsi3+0x20>
 8008304:	10000e26 	beq	r2,zero,8008340 <__udivsi3+0x54>
 8008308:	28000516 	blt	r5,zero,8008320 <__udivsi3+0x34>
 800830c:	294b883a 	add	r5,r5,r5
 8008310:	10bfffc4 	addi	r2,r2,-1
 8008314:	18c7883a 	add	r3,r3,r3
 8008318:	293ffa36 	bltu	r5,r4,8008304 <_gp+0xffff674c>
 800831c:	18000826 	beq	r3,zero,8008340 <__udivsi3+0x54>
 8008320:	0005883a 	mov	r2,zero
 8008324:	31400236 	bltu	r6,r5,8008330 <__udivsi3+0x44>
 8008328:	314dc83a 	sub	r6,r6,r5
 800832c:	10c4b03a 	or	r2,r2,r3
 8008330:	1806d07a 	srli	r3,r3,1
 8008334:	280ad07a 	srli	r5,r5,1
 8008338:	183ffa1e 	bne	r3,zero,8008324 <_gp+0xffff676c>
 800833c:	f800283a 	ret
 8008340:	0005883a 	mov	r2,zero
 8008344:	f800283a 	ret
 8008348:	00c00044 	movi	r3,1
 800834c:	003ff406 	br	8008320 <_gp+0xffff6768>

08008350 <__umodsi3>:
 8008350:	2005883a 	mov	r2,r4
 8008354:	2900122e 	bgeu	r5,r4,80083a0 <__umodsi3+0x50>
 8008358:	28001116 	blt	r5,zero,80083a0 <__umodsi3+0x50>
 800835c:	01800804 	movi	r6,32
 8008360:	00c00044 	movi	r3,1
 8008364:	00000206 	br	8008370 <__umodsi3+0x20>
 8008368:	30000c26 	beq	r6,zero,800839c <__umodsi3+0x4c>
 800836c:	28000516 	blt	r5,zero,8008384 <__umodsi3+0x34>
 8008370:	294b883a 	add	r5,r5,r5
 8008374:	31bfffc4 	addi	r6,r6,-1
 8008378:	18c7883a 	add	r3,r3,r3
 800837c:	293ffa36 	bltu	r5,r4,8008368 <_gp+0xffff67b0>
 8008380:	18000626 	beq	r3,zero,800839c <__umodsi3+0x4c>
 8008384:	1806d07a 	srli	r3,r3,1
 8008388:	11400136 	bltu	r2,r5,8008390 <__umodsi3+0x40>
 800838c:	1145c83a 	sub	r2,r2,r5
 8008390:	280ad07a 	srli	r5,r5,1
 8008394:	183ffb1e 	bne	r3,zero,8008384 <_gp+0xffff67cc>
 8008398:	f800283a 	ret
 800839c:	f800283a 	ret
 80083a0:	00c00044 	movi	r3,1
 80083a4:	003ff706 	br	8008384 <_gp+0xffff67cc>

080083a8 <__divsf3>:
 80083a8:	defff504 	addi	sp,sp,-44
 80083ac:	200cd5fa 	srli	r6,r4,23
 80083b0:	dcc00415 	stw	r19,16(sp)
 80083b4:	2026d7fa 	srli	r19,r4,31
 80083b8:	00c02034 	movhi	r3,128
 80083bc:	dd800715 	stw	r22,28(sp)
 80083c0:	dd000515 	stw	r20,20(sp)
 80083c4:	dc800315 	stw	r18,12(sp)
 80083c8:	18ffffc4 	addi	r3,r3,-1
 80083cc:	dfc00a15 	stw	ra,40(sp)
 80083d0:	df000915 	stw	fp,36(sp)
 80083d4:	ddc00815 	stw	r23,32(sp)
 80083d8:	dd400615 	stw	r21,24(sp)
 80083dc:	dc400215 	stw	r17,8(sp)
 80083e0:	dc000115 	stw	r16,4(sp)
 80083e4:	35003fcc 	andi	r20,r6,255
 80083e8:	1924703a 	and	r18,r3,r4
 80083ec:	9d803fcc 	andi	r22,r19,255
 80083f0:	a0005226 	beq	r20,zero,800853c <__divsf3+0x194>
 80083f4:	00803fc4 	movi	r2,255
 80083f8:	a0802e26 	beq	r20,r2,80084b4 <__divsf3+0x10c>
 80083fc:	91002034 	orhi	r4,r18,128
 8008400:	202490fa 	slli	r18,r4,3
 8008404:	a53fe044 	addi	r20,r20,-127
 8008408:	0021883a 	mov	r16,zero
 800840c:	002f883a 	mov	r23,zero
 8008410:	280cd5fa 	srli	r6,r5,23
 8008414:	282ad7fa 	srli	r21,r5,31
 8008418:	00c02034 	movhi	r3,128
 800841c:	18ffffc4 	addi	r3,r3,-1
 8008420:	31803fcc 	andi	r6,r6,255
 8008424:	1962703a 	and	r17,r3,r5
 8008428:	af003fcc 	andi	fp,r21,255
 800842c:	30004a26 	beq	r6,zero,8008558 <__divsf3+0x1b0>
 8008430:	00803fc4 	movi	r2,255
 8008434:	30804526 	beq	r6,r2,800854c <__divsf3+0x1a4>
 8008438:	89402034 	orhi	r5,r17,128
 800843c:	282290fa 	slli	r17,r5,3
 8008440:	31bfe044 	addi	r6,r6,-127
 8008444:	000b883a 	mov	r5,zero
 8008448:	2c20b03a 	or	r16,r5,r16
 800844c:	802090ba 	slli	r16,r16,2
 8008450:	00820074 	movhi	r2,2049
 8008454:	10a11d04 	addi	r2,r2,-31628
 8008458:	80a1883a 	add	r16,r16,r2
 800845c:	81000017 	ldw	r4,0(r16)
 8008460:	9d46f03a 	xor	r3,r19,r21
 8008464:	180f883a 	mov	r7,r3
 8008468:	18803fcc 	andi	r2,r3,255
 800846c:	a18dc83a 	sub	r6,r20,r6
 8008470:	2000683a 	jmp	r4
 8008474:	08008658 	cmpnei	zero,at,537
 8008478:	080084dc 	xori	zero,at,531
 800847c:	0800864c 	andi	zero,at,537
 8008480:	080084c8 	cmpgei	zero,at,531
 8008484:	0800864c 	andi	zero,at,537
 8008488:	08008624 	muli	zero,at,536
 800848c:	0800864c 	andi	zero,at,537
 8008490:	080084c8 	cmpgei	zero,at,531
 8008494:	080084dc 	xori	zero,at,531
 8008498:	080084dc 	xori	zero,at,531
 800849c:	08008624 	muli	zero,at,536
 80084a0:	080084c8 	cmpgei	zero,at,531
 80084a4:	08008738 	rdprs	zero,at,540
 80084a8:	08008738 	rdprs	zero,at,540
 80084ac:	08008738 	rdprs	zero,at,540
 80084b0:	080086ec 	andhi	zero,at,539
 80084b4:	9000581e 	bne	r18,zero,8008618 <__divsf3+0x270>
 80084b8:	04000204 	movi	r16,8
 80084bc:	05c00084 	movi	r23,2
 80084c0:	003fd306 	br	8008410 <_gp+0xffff6858>
 80084c4:	0023883a 	mov	r17,zero
 80084c8:	e02d883a 	mov	r22,fp
 80084cc:	282f883a 	mov	r23,r5
 80084d0:	00800084 	movi	r2,2
 80084d4:	b8808f1e 	bne	r23,r2,8008714 <__divsf3+0x36c>
 80084d8:	b005883a 	mov	r2,r22
 80084dc:	11c0004c 	andi	r7,r2,1
 80084e0:	013fffc4 	movi	r4,-1
 80084e4:	000d883a 	mov	r6,zero
 80084e8:	21003fcc 	andi	r4,r4,255
 80084ec:	200895fa 	slli	r4,r4,23
 80084f0:	38803fcc 	andi	r2,r7,255
 80084f4:	00c02034 	movhi	r3,128
 80084f8:	100497fa 	slli	r2,r2,31
 80084fc:	18ffffc4 	addi	r3,r3,-1
 8008500:	30c6703a 	and	r3,r6,r3
 8008504:	1906b03a 	or	r3,r3,r4
 8008508:	1884b03a 	or	r2,r3,r2
 800850c:	dfc00a17 	ldw	ra,40(sp)
 8008510:	df000917 	ldw	fp,36(sp)
 8008514:	ddc00817 	ldw	r23,32(sp)
 8008518:	dd800717 	ldw	r22,28(sp)
 800851c:	dd400617 	ldw	r21,24(sp)
 8008520:	dd000517 	ldw	r20,20(sp)
 8008524:	dcc00417 	ldw	r19,16(sp)
 8008528:	dc800317 	ldw	r18,12(sp)
 800852c:	dc400217 	ldw	r17,8(sp)
 8008530:	dc000117 	ldw	r16,4(sp)
 8008534:	dec00b04 	addi	sp,sp,44
 8008538:	f800283a 	ret
 800853c:	90002b1e 	bne	r18,zero,80085ec <__divsf3+0x244>
 8008540:	04000104 	movi	r16,4
 8008544:	05c00044 	movi	r23,1
 8008548:	003fb106 	br	8008410 <_gp+0xffff6858>
 800854c:	8800251e 	bne	r17,zero,80085e4 <__divsf3+0x23c>
 8008550:	01400084 	movi	r5,2
 8008554:	00000206 	br	8008560 <__divsf3+0x1b8>
 8008558:	88001a1e 	bne	r17,zero,80085c4 <__divsf3+0x21c>
 800855c:	01400044 	movi	r5,1
 8008560:	8160b03a 	or	r16,r16,r5
 8008564:	802090ba 	slli	r16,r16,2
 8008568:	00c20074 	movhi	r3,2049
 800856c:	18e16104 	addi	r3,r3,-31356
 8008570:	80e1883a 	add	r16,r16,r3
 8008574:	80c00017 	ldw	r3,0(r16)
 8008578:	9d44f03a 	xor	r2,r19,r21
 800857c:	a18dc83a 	sub	r6,r20,r6
 8008580:	1800683a 	jmp	r3
 8008584:	080084dc 	xori	zero,at,531
 8008588:	080084dc 	xori	zero,at,531
 800858c:	08008728 	cmpgeui	zero,at,540
 8008590:	080084c4 	addi	zero,at,531
 8008594:	08008728 	cmpgeui	zero,at,540
 8008598:	08008624 	muli	zero,at,536
 800859c:	08008728 	cmpgeui	zero,at,540
 80085a0:	080084c4 	addi	zero,at,531
 80085a4:	080084dc 	xori	zero,at,531
 80085a8:	080084dc 	xori	zero,at,531
 80085ac:	08008624 	muli	zero,at,536
 80085b0:	080084c4 	addi	zero,at,531
 80085b4:	08008738 	rdprs	zero,at,540
 80085b8:	08008738 	rdprs	zero,at,540
 80085bc:	08008738 	rdprs	zero,at,540
 80085c0:	08008750 	cmplti	zero,at,541
 80085c4:	8809883a 	mov	r4,r17
 80085c8:	8008ee80 	call	8008ee8 <__clzsi2>
 80085cc:	10fffec4 	addi	r3,r2,-5
 80085d0:	10801d84 	addi	r2,r2,118
 80085d4:	88e2983a 	sll	r17,r17,r3
 80085d8:	008dc83a 	sub	r6,zero,r2
 80085dc:	000b883a 	mov	r5,zero
 80085e0:	003f9906 	br	8008448 <_gp+0xffff6890>
 80085e4:	014000c4 	movi	r5,3
 80085e8:	003f9706 	br	8008448 <_gp+0xffff6890>
 80085ec:	9009883a 	mov	r4,r18
 80085f0:	d9400015 	stw	r5,0(sp)
 80085f4:	8008ee80 	call	8008ee8 <__clzsi2>
 80085f8:	10fffec4 	addi	r3,r2,-5
 80085fc:	11801d84 	addi	r6,r2,118
 8008600:	90e4983a 	sll	r18,r18,r3
 8008604:	01a9c83a 	sub	r20,zero,r6
 8008608:	0021883a 	mov	r16,zero
 800860c:	002f883a 	mov	r23,zero
 8008610:	d9400017 	ldw	r5,0(sp)
 8008614:	003f7e06 	br	8008410 <_gp+0xffff6858>
 8008618:	04000304 	movi	r16,12
 800861c:	05c000c4 	movi	r23,3
 8008620:	003f7b06 	br	8008410 <_gp+0xffff6858>
 8008624:	01802034 	movhi	r6,128
 8008628:	000f883a 	mov	r7,zero
 800862c:	31bfffc4 	addi	r6,r6,-1
 8008630:	013fffc4 	movi	r4,-1
 8008634:	003fac06 	br	80084e8 <_gp+0xffff6930>
 8008638:	01400044 	movi	r5,1
 800863c:	2909c83a 	sub	r4,r5,r4
 8008640:	00c006c4 	movi	r3,27
 8008644:	19004b0e 	bge	r3,r4,8008774 <__divsf3+0x3cc>
 8008648:	114e703a 	and	r7,r2,r5
 800864c:	0009883a 	mov	r4,zero
 8008650:	000d883a 	mov	r6,zero
 8008654:	003fa406 	br	80084e8 <_gp+0xffff6930>
 8008658:	9006917a 	slli	r3,r18,5
 800865c:	8822917a 	slli	r17,r17,5
 8008660:	1c40372e 	bgeu	r3,r17,8008740 <__divsf3+0x398>
 8008664:	31bfffc4 	addi	r6,r6,-1
 8008668:	010006c4 	movi	r4,27
 800866c:	000b883a 	mov	r5,zero
 8008670:	180f883a 	mov	r7,r3
 8008674:	294b883a 	add	r5,r5,r5
 8008678:	18c7883a 	add	r3,r3,r3
 800867c:	38000116 	blt	r7,zero,8008684 <__divsf3+0x2dc>
 8008680:	1c400236 	bltu	r3,r17,800868c <__divsf3+0x2e4>
 8008684:	1c47c83a 	sub	r3,r3,r17
 8008688:	29400054 	ori	r5,r5,1
 800868c:	213fffc4 	addi	r4,r4,-1
 8008690:	203ff71e 	bne	r4,zero,8008670 <_gp+0xffff6ab8>
 8008694:	1806c03a 	cmpne	r3,r3,zero
 8008698:	1962b03a 	or	r17,r3,r5
 800869c:	31001fc4 	addi	r4,r6,127
 80086a0:	013fe50e 	bge	zero,r4,8008638 <_gp+0xffff6a80>
 80086a4:	88c001cc 	andi	r3,r17,7
 80086a8:	18000426 	beq	r3,zero,80086bc <__divsf3+0x314>
 80086ac:	88c003cc 	andi	r3,r17,15
 80086b0:	01400104 	movi	r5,4
 80086b4:	19400126 	beq	r3,r5,80086bc <__divsf3+0x314>
 80086b8:	8963883a 	add	r17,r17,r5
 80086bc:	88c2002c 	andhi	r3,r17,2048
 80086c0:	18000426 	beq	r3,zero,80086d4 <__divsf3+0x32c>
 80086c4:	00fe0034 	movhi	r3,63488
 80086c8:	18ffffc4 	addi	r3,r3,-1
 80086cc:	31002004 	addi	r4,r6,128
 80086d0:	88e2703a 	and	r17,r17,r3
 80086d4:	00c03f84 	movi	r3,254
 80086d8:	193f8016 	blt	r3,r4,80084dc <_gp+0xffff6924>
 80086dc:	880c91ba 	slli	r6,r17,6
 80086e0:	11c0004c 	andi	r7,r2,1
 80086e4:	300cd27a 	srli	r6,r6,9
 80086e8:	003f7f06 	br	80084e8 <_gp+0xffff6930>
 80086ec:	9080102c 	andhi	r2,r18,64
 80086f0:	10000226 	beq	r2,zero,80086fc <__divsf3+0x354>
 80086f4:	8880102c 	andhi	r2,r17,64
 80086f8:	10001826 	beq	r2,zero,800875c <__divsf3+0x3b4>
 80086fc:	00802034 	movhi	r2,128
 8008700:	91801034 	orhi	r6,r18,64
 8008704:	10bfffc4 	addi	r2,r2,-1
 8008708:	980f883a 	mov	r7,r19
 800870c:	308c703a 	and	r6,r6,r2
 8008710:	003fc706 	br	8008630 <_gp+0xffff6a78>
 8008714:	008000c4 	movi	r2,3
 8008718:	b8802d26 	beq	r23,r2,80087d0 <__divsf3+0x428>
 800871c:	00c00044 	movi	r3,1
 8008720:	b005883a 	mov	r2,r22
 8008724:	b8ffdd1e 	bne	r23,r3,800869c <_gp+0xffff6ae4>
 8008728:	11c0004c 	andi	r7,r2,1
 800872c:	0009883a 	mov	r4,zero
 8008730:	000d883a 	mov	r6,zero
 8008734:	003f6c06 	br	80084e8 <_gp+0xffff6930>
 8008738:	9023883a 	mov	r17,r18
 800873c:	003f6406 	br	80084d0 <_gp+0xffff6918>
 8008740:	1c47c83a 	sub	r3,r3,r17
 8008744:	01000684 	movi	r4,26
 8008748:	01400044 	movi	r5,1
 800874c:	003fc806 	br	8008670 <_gp+0xffff6ab8>
 8008750:	9080102c 	andhi	r2,r18,64
 8008754:	103fe926 	beq	r2,zero,80086fc <_gp+0xffff6b44>
 8008758:	0023883a 	mov	r17,zero
 800875c:	00802034 	movhi	r2,128
 8008760:	89801034 	orhi	r6,r17,64
 8008764:	10bfffc4 	addi	r2,r2,-1
 8008768:	a80f883a 	mov	r7,r21
 800876c:	308c703a 	and	r6,r6,r2
 8008770:	003faf06 	br	8008630 <_gp+0xffff6a78>
 8008774:	01c00804 	movi	r7,32
 8008778:	390fc83a 	sub	r7,r7,r4
 800877c:	89ce983a 	sll	r7,r17,r7
 8008780:	890ad83a 	srl	r5,r17,r4
 8008784:	380ec03a 	cmpne	r7,r7,zero
 8008788:	29cab03a 	or	r5,r5,r7
 800878c:	28c001cc 	andi	r3,r5,7
 8008790:	18000426 	beq	r3,zero,80087a4 <__divsf3+0x3fc>
 8008794:	28c003cc 	andi	r3,r5,15
 8008798:	01000104 	movi	r4,4
 800879c:	19000126 	beq	r3,r4,80087a4 <__divsf3+0x3fc>
 80087a0:	290b883a 	add	r5,r5,r4
 80087a4:	28c1002c 	andhi	r3,r5,1024
 80087a8:	18000426 	beq	r3,zero,80087bc <__divsf3+0x414>
 80087ac:	11c0004c 	andi	r7,r2,1
 80087b0:	01000044 	movi	r4,1
 80087b4:	000d883a 	mov	r6,zero
 80087b8:	003f4b06 	br	80084e8 <_gp+0xffff6930>
 80087bc:	280a91ba 	slli	r5,r5,6
 80087c0:	11c0004c 	andi	r7,r2,1
 80087c4:	0009883a 	mov	r4,zero
 80087c8:	280cd27a 	srli	r6,r5,9
 80087cc:	003f4606 	br	80084e8 <_gp+0xffff6930>
 80087d0:	00802034 	movhi	r2,128
 80087d4:	89801034 	orhi	r6,r17,64
 80087d8:	10bfffc4 	addi	r2,r2,-1
 80087dc:	b00f883a 	mov	r7,r22
 80087e0:	308c703a 	and	r6,r6,r2
 80087e4:	003f9206 	br	8008630 <_gp+0xffff6a78>

080087e8 <__gesf2>:
 80087e8:	2004d5fa 	srli	r2,r4,23
 80087ec:	2806d5fa 	srli	r3,r5,23
 80087f0:	01802034 	movhi	r6,128
 80087f4:	31bfffc4 	addi	r6,r6,-1
 80087f8:	10803fcc 	andi	r2,r2,255
 80087fc:	01c03fc4 	movi	r7,255
 8008800:	3110703a 	and	r8,r6,r4
 8008804:	18c03fcc 	andi	r3,r3,255
 8008808:	314c703a 	and	r6,r6,r5
 800880c:	2008d7fa 	srli	r4,r4,31
 8008810:	280ad7fa 	srli	r5,r5,31
 8008814:	11c01926 	beq	r2,r7,800887c <__gesf2+0x94>
 8008818:	01c03fc4 	movi	r7,255
 800881c:	19c00f26 	beq	r3,r7,800885c <__gesf2+0x74>
 8008820:	1000061e 	bne	r2,zero,800883c <__gesf2+0x54>
 8008824:	400f003a 	cmpeq	r7,r8,zero
 8008828:	1800071e 	bne	r3,zero,8008848 <__gesf2+0x60>
 800882c:	3000061e 	bne	r6,zero,8008848 <__gesf2+0x60>
 8008830:	0005883a 	mov	r2,zero
 8008834:	40000e1e 	bne	r8,zero,8008870 <__gesf2+0x88>
 8008838:	f800283a 	ret
 800883c:	18000a1e 	bne	r3,zero,8008868 <__gesf2+0x80>
 8008840:	30000b26 	beq	r6,zero,8008870 <__gesf2+0x88>
 8008844:	000f883a 	mov	r7,zero
 8008848:	29403fcc 	andi	r5,r5,255
 800884c:	38000726 	beq	r7,zero,800886c <__gesf2+0x84>
 8008850:	28000826 	beq	r5,zero,8008874 <__gesf2+0x8c>
 8008854:	00800044 	movi	r2,1
 8008858:	f800283a 	ret
 800885c:	303ff026 	beq	r6,zero,8008820 <_gp+0xffff6c68>
 8008860:	00bfff84 	movi	r2,-2
 8008864:	f800283a 	ret
 8008868:	29403fcc 	andi	r5,r5,255
 800886c:	21400526 	beq	r4,r5,8008884 <__gesf2+0x9c>
 8008870:	203ff826 	beq	r4,zero,8008854 <_gp+0xffff6c9c>
 8008874:	00bfffc4 	movi	r2,-1
 8008878:	f800283a 	ret
 800887c:	403fe626 	beq	r8,zero,8008818 <_gp+0xffff6c60>
 8008880:	003ff706 	br	8008860 <_gp+0xffff6ca8>
 8008884:	18bffa16 	blt	r3,r2,8008870 <_gp+0xffff6cb8>
 8008888:	10c00216 	blt	r2,r3,8008894 <__gesf2+0xac>
 800888c:	323ff836 	bltu	r6,r8,8008870 <_gp+0xffff6cb8>
 8008890:	4180022e 	bgeu	r8,r6,800889c <__gesf2+0xb4>
 8008894:	203fef1e 	bne	r4,zero,8008854 <_gp+0xffff6c9c>
 8008898:	003ff606 	br	8008874 <_gp+0xffff6cbc>
 800889c:	0005883a 	mov	r2,zero
 80088a0:	f800283a 	ret

080088a4 <__subsf3>:
 80088a4:	defffc04 	addi	sp,sp,-16
 80088a8:	280cd5fa 	srli	r6,r5,23
 80088ac:	dc000015 	stw	r16,0(sp)
 80088b0:	01c02034 	movhi	r7,128
 80088b4:	2020d5fa 	srli	r16,r4,23
 80088b8:	39ffffc4 	addi	r7,r7,-1
 80088bc:	3906703a 	and	r3,r7,r4
 80088c0:	dc400115 	stw	r17,4(sp)
 80088c4:	394e703a 	and	r7,r7,r5
 80088c8:	2022d7fa 	srli	r17,r4,31
 80088cc:	dfc00315 	stw	ra,12(sp)
 80088d0:	dc800215 	stw	r18,8(sp)
 80088d4:	31803fcc 	andi	r6,r6,255
 80088d8:	01003fc4 	movi	r4,255
 80088dc:	84003fcc 	andi	r16,r16,255
 80088e0:	180690fa 	slli	r3,r3,3
 80088e4:	2804d7fa 	srli	r2,r5,31
 80088e8:	380e90fa 	slli	r7,r7,3
 80088ec:	31006d26 	beq	r6,r4,8008aa4 <__subsf3+0x200>
 80088f0:	1080005c 	xori	r2,r2,1
 80088f4:	8189c83a 	sub	r4,r16,r6
 80088f8:	14404f26 	beq	r2,r17,8008a38 <__subsf3+0x194>
 80088fc:	0100770e 	bge	zero,r4,8008adc <__subsf3+0x238>
 8008900:	30001e1e 	bne	r6,zero,800897c <__subsf3+0xd8>
 8008904:	38006a1e 	bne	r7,zero,8008ab0 <__subsf3+0x20c>
 8008908:	188001cc 	andi	r2,r3,7
 800890c:	10000426 	beq	r2,zero,8008920 <__subsf3+0x7c>
 8008910:	188003cc 	andi	r2,r3,15
 8008914:	01000104 	movi	r4,4
 8008918:	11000126 	beq	r2,r4,8008920 <__subsf3+0x7c>
 800891c:	1907883a 	add	r3,r3,r4
 8008920:	1881002c 	andhi	r2,r3,1024
 8008924:	10003926 	beq	r2,zero,8008a0c <__subsf3+0x168>
 8008928:	84000044 	addi	r16,r16,1
 800892c:	00803fc4 	movi	r2,255
 8008930:	80807526 	beq	r16,r2,8008b08 <__subsf3+0x264>
 8008934:	180691ba 	slli	r3,r3,6
 8008938:	8880004c 	andi	r2,r17,1
 800893c:	180ad27a 	srli	r5,r3,9
 8008940:	84003fcc 	andi	r16,r16,255
 8008944:	800695fa 	slli	r3,r16,23
 8008948:	10803fcc 	andi	r2,r2,255
 800894c:	01002034 	movhi	r4,128
 8008950:	213fffc4 	addi	r4,r4,-1
 8008954:	100497fa 	slli	r2,r2,31
 8008958:	2920703a 	and	r16,r5,r4
 800895c:	80e0b03a 	or	r16,r16,r3
 8008960:	8084b03a 	or	r2,r16,r2
 8008964:	dfc00317 	ldw	ra,12(sp)
 8008968:	dc800217 	ldw	r18,8(sp)
 800896c:	dc400117 	ldw	r17,4(sp)
 8008970:	dc000017 	ldw	r16,0(sp)
 8008974:	dec00404 	addi	sp,sp,16
 8008978:	f800283a 	ret
 800897c:	00803fc4 	movi	r2,255
 8008980:	80bfe126 	beq	r16,r2,8008908 <_gp+0xffff6d50>
 8008984:	39c10034 	orhi	r7,r7,1024
 8008988:	008006c4 	movi	r2,27
 800898c:	11007416 	blt	r2,r4,8008b60 <__subsf3+0x2bc>
 8008990:	00800804 	movi	r2,32
 8008994:	1105c83a 	sub	r2,r2,r4
 8008998:	3884983a 	sll	r2,r7,r2
 800899c:	390ed83a 	srl	r7,r7,r4
 80089a0:	1008c03a 	cmpne	r4,r2,zero
 80089a4:	390eb03a 	or	r7,r7,r4
 80089a8:	19c7c83a 	sub	r3,r3,r7
 80089ac:	1881002c 	andhi	r2,r3,1024
 80089b0:	10001426 	beq	r2,zero,8008a04 <__subsf3+0x160>
 80089b4:	04810034 	movhi	r18,1024
 80089b8:	94bfffc4 	addi	r18,r18,-1
 80089bc:	1ca4703a 	and	r18,r3,r18
 80089c0:	9009883a 	mov	r4,r18
 80089c4:	8008ee80 	call	8008ee8 <__clzsi2>
 80089c8:	10bffec4 	addi	r2,r2,-5
 80089cc:	90a4983a 	sll	r18,r18,r2
 80089d0:	14005116 	blt	r2,r16,8008b18 <__subsf3+0x274>
 80089d4:	1405c83a 	sub	r2,r2,r16
 80089d8:	10c00044 	addi	r3,r2,1
 80089dc:	00800804 	movi	r2,32
 80089e0:	10c5c83a 	sub	r2,r2,r3
 80089e4:	9084983a 	sll	r2,r18,r2
 80089e8:	90e4d83a 	srl	r18,r18,r3
 80089ec:	0021883a 	mov	r16,zero
 80089f0:	1006c03a 	cmpne	r3,r2,zero
 80089f4:	90c6b03a 	or	r3,r18,r3
 80089f8:	003fc306 	br	8008908 <_gp+0xffff6d50>
 80089fc:	2000e026 	beq	r4,zero,8008d80 <__subsf3+0x4dc>
 8008a00:	2007883a 	mov	r3,r4
 8008a04:	188001cc 	andi	r2,r3,7
 8008a08:	103fc11e 	bne	r2,zero,8008910 <_gp+0xffff6d58>
 8008a0c:	180ad0fa 	srli	r5,r3,3
 8008a10:	00c03fc4 	movi	r3,255
 8008a14:	8880004c 	andi	r2,r17,1
 8008a18:	80c0031e 	bne	r16,r3,8008a28 <__subsf3+0x184>
 8008a1c:	28006d26 	beq	r5,zero,8008bd4 <__subsf3+0x330>
 8008a20:	29401034 	orhi	r5,r5,64
 8008a24:	043fffc4 	movi	r16,-1
 8008a28:	00c02034 	movhi	r3,128
 8008a2c:	18ffffc4 	addi	r3,r3,-1
 8008a30:	28ca703a 	and	r5,r5,r3
 8008a34:	003fc206 	br	8008940 <_gp+0xffff6d88>
 8008a38:	01003c0e 	bge	zero,r4,8008b2c <__subsf3+0x288>
 8008a3c:	30002126 	beq	r6,zero,8008ac4 <__subsf3+0x220>
 8008a40:	01403fc4 	movi	r5,255
 8008a44:	817fb026 	beq	r16,r5,8008908 <_gp+0xffff6d50>
 8008a48:	39c10034 	orhi	r7,r7,1024
 8008a4c:	014006c4 	movi	r5,27
 8008a50:	29007416 	blt	r5,r4,8008c24 <__subsf3+0x380>
 8008a54:	01400804 	movi	r5,32
 8008a58:	290bc83a 	sub	r5,r5,r4
 8008a5c:	394a983a 	sll	r5,r7,r5
 8008a60:	390ed83a 	srl	r7,r7,r4
 8008a64:	2808c03a 	cmpne	r4,r5,zero
 8008a68:	390eb03a 	or	r7,r7,r4
 8008a6c:	19c7883a 	add	r3,r3,r7
 8008a70:	1901002c 	andhi	r4,r3,1024
 8008a74:	20003826 	beq	r4,zero,8008b58 <__subsf3+0x2b4>
 8008a78:	84000044 	addi	r16,r16,1
 8008a7c:	01003fc4 	movi	r4,255
 8008a80:	81005426 	beq	r16,r4,8008bd4 <__subsf3+0x330>
 8008a84:	1023883a 	mov	r17,r2
 8008a88:	00bf0034 	movhi	r2,64512
 8008a8c:	10bfffc4 	addi	r2,r2,-1
 8008a90:	1900004c 	andi	r4,r3,1
 8008a94:	1886703a 	and	r3,r3,r2
 8008a98:	1806d07a 	srli	r3,r3,1
 8008a9c:	1906b03a 	or	r3,r3,r4
 8008aa0:	003f9906 	br	8008908 <_gp+0xffff6d50>
 8008aa4:	383f9226 	beq	r7,zero,80088f0 <_gp+0xffff6d38>
 8008aa8:	10803fcc 	andi	r2,r2,255
 8008aac:	003f9106 	br	80088f4 <_gp+0xffff6d3c>
 8008ab0:	213fffc4 	addi	r4,r4,-1
 8008ab4:	203fbc26 	beq	r4,zero,80089a8 <_gp+0xffff6df0>
 8008ab8:	00803fc4 	movi	r2,255
 8008abc:	80bfb21e 	bne	r16,r2,8008988 <_gp+0xffff6dd0>
 8008ac0:	003f9106 	br	8008908 <_gp+0xffff6d50>
 8008ac4:	383f9026 	beq	r7,zero,8008908 <_gp+0xffff6d50>
 8008ac8:	213fffc4 	addi	r4,r4,-1
 8008acc:	203fe726 	beq	r4,zero,8008a6c <_gp+0xffff6eb4>
 8008ad0:	01403fc4 	movi	r5,255
 8008ad4:	817fdd1e 	bne	r16,r5,8008a4c <_gp+0xffff6e94>
 8008ad8:	003f8b06 	br	8008908 <_gp+0xffff6d50>
 8008adc:	2000221e 	bne	r4,zero,8008b68 <__subsf3+0x2c4>
 8008ae0:	81000044 	addi	r4,r16,1
 8008ae4:	21003fcc 	andi	r4,r4,255
 8008ae8:	01400044 	movi	r5,1
 8008aec:	2900470e 	bge	r5,r4,8008c0c <__subsf3+0x368>
 8008af0:	19e5c83a 	sub	r18,r3,r7
 8008af4:	9141002c 	andhi	r5,r18,1024
 8008af8:	28002d26 	beq	r5,zero,8008bb0 <__subsf3+0x30c>
 8008afc:	38e5c83a 	sub	r18,r7,r3
 8008b00:	1023883a 	mov	r17,r2
 8008b04:	003fae06 	br	80089c0 <_gp+0xffff6e08>
 8008b08:	8880004c 	andi	r2,r17,1
 8008b0c:	043fffc4 	movi	r16,-1
 8008b10:	000b883a 	mov	r5,zero
 8008b14:	003f8a06 	br	8008940 <_gp+0xffff6d88>
 8008b18:	00ff0034 	movhi	r3,64512
 8008b1c:	18ffffc4 	addi	r3,r3,-1
 8008b20:	80a1c83a 	sub	r16,r16,r2
 8008b24:	90c6703a 	and	r3,r18,r3
 8008b28:	003f7706 	br	8008908 <_gp+0xffff6d50>
 8008b2c:	2000431e 	bne	r4,zero,8008c3c <__subsf3+0x398>
 8008b30:	81000044 	addi	r4,r16,1
 8008b34:	21803fcc 	andi	r6,r4,255
 8008b38:	01400044 	movi	r5,1
 8008b3c:	2980280e 	bge	r5,r6,8008be0 <__subsf3+0x33c>
 8008b40:	01403fc4 	movi	r5,255
 8008b44:	21402326 	beq	r4,r5,8008bd4 <__subsf3+0x330>
 8008b48:	19c7883a 	add	r3,r3,r7
 8008b4c:	1806d07a 	srli	r3,r3,1
 8008b50:	2021883a 	mov	r16,r4
 8008b54:	003f6c06 	br	8008908 <_gp+0xffff6d50>
 8008b58:	1023883a 	mov	r17,r2
 8008b5c:	003fa906 	br	8008a04 <_gp+0xffff6e4c>
 8008b60:	01c00044 	movi	r7,1
 8008b64:	003f9006 	br	80089a8 <_gp+0xffff6df0>
 8008b68:	8000151e 	bne	r16,zero,8008bc0 <__subsf3+0x31c>
 8008b6c:	18002f26 	beq	r3,zero,8008c2c <__subsf3+0x388>
 8008b70:	0108303a 	nor	r4,zero,r4
 8008b74:	20000a26 	beq	r4,zero,8008ba0 <__subsf3+0x2fc>
 8008b78:	01403fc4 	movi	r5,255
 8008b7c:	31402b26 	beq	r6,r5,8008c2c <__subsf3+0x388>
 8008b80:	014006c4 	movi	r5,27
 8008b84:	29006e16 	blt	r5,r4,8008d40 <__subsf3+0x49c>
 8008b88:	01400804 	movi	r5,32
 8008b8c:	290bc83a 	sub	r5,r5,r4
 8008b90:	194a983a 	sll	r5,r3,r5
 8008b94:	1908d83a 	srl	r4,r3,r4
 8008b98:	2806c03a 	cmpne	r3,r5,zero
 8008b9c:	20c6b03a 	or	r3,r4,r3
 8008ba0:	38c7c83a 	sub	r3,r7,r3
 8008ba4:	3021883a 	mov	r16,r6
 8008ba8:	1023883a 	mov	r17,r2
 8008bac:	003f7f06 	br	80089ac <_gp+0xffff6df4>
 8008bb0:	903f831e 	bne	r18,zero,80089c0 <_gp+0xffff6e08>
 8008bb4:	0005883a 	mov	r2,zero
 8008bb8:	0021883a 	mov	r16,zero
 8008bbc:	003f9a06 	br	8008a28 <_gp+0xffff6e70>
 8008bc0:	01403fc4 	movi	r5,255
 8008bc4:	31401926 	beq	r6,r5,8008c2c <__subsf3+0x388>
 8008bc8:	0109c83a 	sub	r4,zero,r4
 8008bcc:	18c10034 	orhi	r3,r3,1024
 8008bd0:	003feb06 	br	8008b80 <_gp+0xffff6fc8>
 8008bd4:	043fffc4 	movi	r16,-1
 8008bd8:	000b883a 	mov	r5,zero
 8008bdc:	003f5806 	br	8008940 <_gp+0xffff6d88>
 8008be0:	8000481e 	bne	r16,zero,8008d04 <__subsf3+0x460>
 8008be4:	18006226 	beq	r3,zero,8008d70 <__subsf3+0x4cc>
 8008be8:	383f4726 	beq	r7,zero,8008908 <_gp+0xffff6d50>
 8008bec:	19c7883a 	add	r3,r3,r7
 8008bf0:	1881002c 	andhi	r2,r3,1024
 8008bf4:	103f8326 	beq	r2,zero,8008a04 <_gp+0xffff6e4c>
 8008bf8:	00bf0034 	movhi	r2,64512
 8008bfc:	10bfffc4 	addi	r2,r2,-1
 8008c00:	2821883a 	mov	r16,r5
 8008c04:	1886703a 	and	r3,r3,r2
 8008c08:	003f3f06 	br	8008908 <_gp+0xffff6d50>
 8008c0c:	80001c1e 	bne	r16,zero,8008c80 <__subsf3+0x3dc>
 8008c10:	1800261e 	bne	r3,zero,8008cac <__subsf3+0x408>
 8008c14:	38004c26 	beq	r7,zero,8008d48 <__subsf3+0x4a4>
 8008c18:	3807883a 	mov	r3,r7
 8008c1c:	1023883a 	mov	r17,r2
 8008c20:	003f3906 	br	8008908 <_gp+0xffff6d50>
 8008c24:	01c00044 	movi	r7,1
 8008c28:	003f9006 	br	8008a6c <_gp+0xffff6eb4>
 8008c2c:	3807883a 	mov	r3,r7
 8008c30:	3021883a 	mov	r16,r6
 8008c34:	1023883a 	mov	r17,r2
 8008c38:	003f3306 	br	8008908 <_gp+0xffff6d50>
 8008c3c:	8000161e 	bne	r16,zero,8008c98 <__subsf3+0x3f4>
 8008c40:	18002d26 	beq	r3,zero,8008cf8 <__subsf3+0x454>
 8008c44:	0108303a 	nor	r4,zero,r4
 8008c48:	20000a26 	beq	r4,zero,8008c74 <__subsf3+0x3d0>
 8008c4c:	01403fc4 	movi	r5,255
 8008c50:	31402926 	beq	r6,r5,8008cf8 <__subsf3+0x454>
 8008c54:	014006c4 	movi	r5,27
 8008c58:	29004716 	blt	r5,r4,8008d78 <__subsf3+0x4d4>
 8008c5c:	01400804 	movi	r5,32
 8008c60:	290bc83a 	sub	r5,r5,r4
 8008c64:	194a983a 	sll	r5,r3,r5
 8008c68:	1908d83a 	srl	r4,r3,r4
 8008c6c:	2806c03a 	cmpne	r3,r5,zero
 8008c70:	20c6b03a 	or	r3,r4,r3
 8008c74:	19c7883a 	add	r3,r3,r7
 8008c78:	3021883a 	mov	r16,r6
 8008c7c:	003f7c06 	br	8008a70 <_gp+0xffff6eb8>
 8008c80:	1800111e 	bne	r3,zero,8008cc8 <__subsf3+0x424>
 8008c84:	38003326 	beq	r7,zero,8008d54 <__subsf3+0x4b0>
 8008c88:	3807883a 	mov	r3,r7
 8008c8c:	1023883a 	mov	r17,r2
 8008c90:	04003fc4 	movi	r16,255
 8008c94:	003f1c06 	br	8008908 <_gp+0xffff6d50>
 8008c98:	01403fc4 	movi	r5,255
 8008c9c:	31401626 	beq	r6,r5,8008cf8 <__subsf3+0x454>
 8008ca0:	0109c83a 	sub	r4,zero,r4
 8008ca4:	18c10034 	orhi	r3,r3,1024
 8008ca8:	003fea06 	br	8008c54 <_gp+0xffff709c>
 8008cac:	383f1626 	beq	r7,zero,8008908 <_gp+0xffff6d50>
 8008cb0:	19c9c83a 	sub	r4,r3,r7
 8008cb4:	2141002c 	andhi	r5,r4,1024
 8008cb8:	283f5026 	beq	r5,zero,80089fc <_gp+0xffff6e44>
 8008cbc:	38c7c83a 	sub	r3,r7,r3
 8008cc0:	1023883a 	mov	r17,r2
 8008cc4:	003f1006 	br	8008908 <_gp+0xffff6d50>
 8008cc8:	38001b26 	beq	r7,zero,8008d38 <__subsf3+0x494>
 8008ccc:	1806d0fa 	srli	r3,r3,3
 8008cd0:	1900102c 	andhi	r4,r3,64
 8008cd4:	20000526 	beq	r4,zero,8008cec <__subsf3+0x448>
 8008cd8:	380ed0fa 	srli	r7,r7,3
 8008cdc:	3900102c 	andhi	r4,r7,64
 8008ce0:	2000021e 	bne	r4,zero,8008cec <__subsf3+0x448>
 8008ce4:	3807883a 	mov	r3,r7
 8008ce8:	1023883a 	mov	r17,r2
 8008cec:	180690fa 	slli	r3,r3,3
 8008cf0:	04003fc4 	movi	r16,255
 8008cf4:	003f0406 	br	8008908 <_gp+0xffff6d50>
 8008cf8:	3807883a 	mov	r3,r7
 8008cfc:	3021883a 	mov	r16,r6
 8008d00:	003f0106 	br	8008908 <_gp+0xffff6d50>
 8008d04:	18001726 	beq	r3,zero,8008d64 <__subsf3+0x4c0>
 8008d08:	38000b26 	beq	r7,zero,8008d38 <__subsf3+0x494>
 8008d0c:	1806d0fa 	srli	r3,r3,3
 8008d10:	1900102c 	andhi	r4,r3,64
 8008d14:	20000426 	beq	r4,zero,8008d28 <__subsf3+0x484>
 8008d18:	380ed0fa 	srli	r7,r7,3
 8008d1c:	3900102c 	andhi	r4,r7,64
 8008d20:	2000011e 	bne	r4,zero,8008d28 <__subsf3+0x484>
 8008d24:	3807883a 	mov	r3,r7
 8008d28:	180690fa 	slli	r3,r3,3
 8008d2c:	1023883a 	mov	r17,r2
 8008d30:	04003fc4 	movi	r16,255
 8008d34:	003ef406 	br	8008908 <_gp+0xffff6d50>
 8008d38:	04003fc4 	movi	r16,255
 8008d3c:	003ef206 	br	8008908 <_gp+0xffff6d50>
 8008d40:	00c00044 	movi	r3,1
 8008d44:	003f9606 	br	8008ba0 <_gp+0xffff6fe8>
 8008d48:	000b883a 	mov	r5,zero
 8008d4c:	0005883a 	mov	r2,zero
 8008d50:	003f3506 	br	8008a28 <_gp+0xffff6e70>
 8008d54:	01402034 	movhi	r5,128
 8008d58:	297fffc4 	addi	r5,r5,-1
 8008d5c:	0005883a 	mov	r2,zero
 8008d60:	003f2f06 	br	8008a20 <_gp+0xffff6e68>
 8008d64:	3807883a 	mov	r3,r7
 8008d68:	04003fc4 	movi	r16,255
 8008d6c:	003ee606 	br	8008908 <_gp+0xffff6d50>
 8008d70:	3807883a 	mov	r3,r7
 8008d74:	003ee406 	br	8008908 <_gp+0xffff6d50>
 8008d78:	00c00044 	movi	r3,1
 8008d7c:	003fbd06 	br	8008c74 <_gp+0xffff70bc>
 8008d80:	0005883a 	mov	r2,zero
 8008d84:	003f2806 	br	8008a28 <_gp+0xffff6e70>

08008d88 <__fixsfsi>:
 8008d88:	200ad5fa 	srli	r5,r4,23
 8008d8c:	00c02034 	movhi	r3,128
 8008d90:	18ffffc4 	addi	r3,r3,-1
 8008d94:	29403fcc 	andi	r5,r5,255
 8008d98:	00801f84 	movi	r2,126
 8008d9c:	1906703a 	and	r3,r3,r4
 8008da0:	2008d7fa 	srli	r4,r4,31
 8008da4:	11400e0e 	bge	r2,r5,8008de0 <__fixsfsi+0x58>
 8008da8:	00802744 	movi	r2,157
 8008dac:	11400816 	blt	r2,r5,8008dd0 <__fixsfsi+0x48>
 8008db0:	00802544 	movi	r2,149
 8008db4:	18c02034 	orhi	r3,r3,128
 8008db8:	11400b0e 	bge	r2,r5,8008de8 <__fixsfsi+0x60>
 8008dbc:	28bfda84 	addi	r2,r5,-150
 8008dc0:	1884983a 	sll	r2,r3,r2
 8008dc4:	20000726 	beq	r4,zero,8008de4 <__fixsfsi+0x5c>
 8008dc8:	0085c83a 	sub	r2,zero,r2
 8008dcc:	f800283a 	ret
 8008dd0:	00a00034 	movhi	r2,32768
 8008dd4:	10bfffc4 	addi	r2,r2,-1
 8008dd8:	2085883a 	add	r2,r4,r2
 8008ddc:	f800283a 	ret
 8008de0:	0005883a 	mov	r2,zero
 8008de4:	f800283a 	ret
 8008de8:	00802584 	movi	r2,150
 8008dec:	1145c83a 	sub	r2,r2,r5
 8008df0:	1884d83a 	srl	r2,r3,r2
 8008df4:	003ff306 	br	8008dc4 <_gp+0xffff720c>

08008df8 <__floatunsisf>:
 8008df8:	defffe04 	addi	sp,sp,-8
 8008dfc:	dfc00115 	stw	ra,4(sp)
 8008e00:	dc000015 	stw	r16,0(sp)
 8008e04:	20002c26 	beq	r4,zero,8008eb8 <__floatunsisf+0xc0>
 8008e08:	2021883a 	mov	r16,r4
 8008e0c:	8008ee80 	call	8008ee8 <__clzsi2>
 8008e10:	00c02784 	movi	r3,158
 8008e14:	1887c83a 	sub	r3,r3,r2
 8008e18:	01002584 	movi	r4,150
 8008e1c:	20c00f16 	blt	r4,r3,8008e5c <__floatunsisf+0x64>
 8008e20:	20c9c83a 	sub	r4,r4,r3
 8008e24:	8108983a 	sll	r4,r16,r4
 8008e28:	00802034 	movhi	r2,128
 8008e2c:	10bfffc4 	addi	r2,r2,-1
 8008e30:	2088703a 	and	r4,r4,r2
 8008e34:	18803fcc 	andi	r2,r3,255
 8008e38:	100695fa 	slli	r3,r2,23
 8008e3c:	00802034 	movhi	r2,128
 8008e40:	10bfffc4 	addi	r2,r2,-1
 8008e44:	2084703a 	and	r2,r4,r2
 8008e48:	10c4b03a 	or	r2,r2,r3
 8008e4c:	dfc00117 	ldw	ra,4(sp)
 8008e50:	dc000017 	ldw	r16,0(sp)
 8008e54:	dec00204 	addi	sp,sp,8
 8008e58:	f800283a 	ret
 8008e5c:	01002644 	movi	r4,153
 8008e60:	20c01816 	blt	r4,r3,8008ec4 <__floatunsisf+0xcc>
 8008e64:	20c9c83a 	sub	r4,r4,r3
 8008e68:	8108983a 	sll	r4,r16,r4
 8008e6c:	017f0034 	movhi	r5,64512
 8008e70:	297fffc4 	addi	r5,r5,-1
 8008e74:	218001cc 	andi	r6,r4,7
 8008e78:	214a703a 	and	r5,r4,r5
 8008e7c:	30000426 	beq	r6,zero,8008e90 <__floatunsisf+0x98>
 8008e80:	210003cc 	andi	r4,r4,15
 8008e84:	01800104 	movi	r6,4
 8008e88:	21800126 	beq	r4,r6,8008e90 <__floatunsisf+0x98>
 8008e8c:	298b883a 	add	r5,r5,r6
 8008e90:	2901002c 	andhi	r4,r5,1024
 8008e94:	20000526 	beq	r4,zero,8008eac <__floatunsisf+0xb4>
 8008e98:	00c027c4 	movi	r3,159
 8008e9c:	1887c83a 	sub	r3,r3,r2
 8008ea0:	00bf0034 	movhi	r2,64512
 8008ea4:	10bfffc4 	addi	r2,r2,-1
 8008ea8:	288a703a 	and	r5,r5,r2
 8008eac:	280891ba 	slli	r4,r5,6
 8008eb0:	2008d27a 	srli	r4,r4,9
 8008eb4:	003fdf06 	br	8008e34 <_gp+0xffff727c>
 8008eb8:	0007883a 	mov	r3,zero
 8008ebc:	0009883a 	mov	r4,zero
 8008ec0:	003fdc06 	br	8008e34 <_gp+0xffff727c>
 8008ec4:	01402e44 	movi	r5,185
 8008ec8:	28cbc83a 	sub	r5,r5,r3
 8008ecc:	01000144 	movi	r4,5
 8008ed0:	2089c83a 	sub	r4,r4,r2
 8008ed4:	814a983a 	sll	r5,r16,r5
 8008ed8:	8108d83a 	srl	r4,r16,r4
 8008edc:	2820c03a 	cmpne	r16,r5,zero
 8008ee0:	2408b03a 	or	r4,r4,r16
 8008ee4:	003fe106 	br	8008e6c <_gp+0xffff72b4>

08008ee8 <__clzsi2>:
 8008ee8:	00bfffd4 	movui	r2,65535
 8008eec:	11000536 	bltu	r2,r4,8008f04 <__clzsi2+0x1c>
 8008ef0:	00803fc4 	movi	r2,255
 8008ef4:	11000f36 	bltu	r2,r4,8008f34 <__clzsi2+0x4c>
 8008ef8:	00800804 	movi	r2,32
 8008efc:	0007883a 	mov	r3,zero
 8008f00:	00000506 	br	8008f18 <__clzsi2+0x30>
 8008f04:	00804034 	movhi	r2,256
 8008f08:	10bfffc4 	addi	r2,r2,-1
 8008f0c:	11000c2e 	bgeu	r2,r4,8008f40 <__clzsi2+0x58>
 8008f10:	00800204 	movi	r2,8
 8008f14:	00c00604 	movi	r3,24
 8008f18:	20c8d83a 	srl	r4,r4,r3
 8008f1c:	00c20074 	movhi	r3,2049
 8008f20:	18e67504 	addi	r3,r3,-26156
 8008f24:	1909883a 	add	r4,r3,r4
 8008f28:	20c00003 	ldbu	r3,0(r4)
 8008f2c:	10c5c83a 	sub	r2,r2,r3
 8008f30:	f800283a 	ret
 8008f34:	00800604 	movi	r2,24
 8008f38:	00c00204 	movi	r3,8
 8008f3c:	003ff606 	br	8008f18 <_gp+0xffff7360>
 8008f40:	00800404 	movi	r2,16
 8008f44:	1007883a 	mov	r3,r2
 8008f48:	003ff306 	br	8008f18 <_gp+0xffff7360>

08008f4c <_printf_r>:
 8008f4c:	defffd04 	addi	sp,sp,-12
 8008f50:	dfc00015 	stw	ra,0(sp)
 8008f54:	d9800115 	stw	r6,4(sp)
 8008f58:	d9c00215 	stw	r7,8(sp)
 8008f5c:	20c00217 	ldw	r3,8(r4)
 8008f60:	01820074 	movhi	r6,2049
 8008f64:	31a58c04 	addi	r6,r6,-27088
 8008f68:	19800115 	stw	r6,4(r3)
 8008f6c:	280d883a 	mov	r6,r5
 8008f70:	21400217 	ldw	r5,8(r4)
 8008f74:	d9c00104 	addi	r7,sp,4
 8008f78:	80090f00 	call	80090f0 <___vfprintf_internal_r>
 8008f7c:	dfc00017 	ldw	ra,0(sp)
 8008f80:	dec00304 	addi	sp,sp,12
 8008f84:	f800283a 	ret

08008f88 <printf>:
 8008f88:	defffc04 	addi	sp,sp,-16
 8008f8c:	dfc00015 	stw	ra,0(sp)
 8008f90:	d9400115 	stw	r5,4(sp)
 8008f94:	d9800215 	stw	r6,8(sp)
 8008f98:	d9c00315 	stw	r7,12(sp)
 8008f9c:	00820074 	movhi	r2,2049
 8008fa0:	10a6ef04 	addi	r2,r2,-25668
 8008fa4:	10800017 	ldw	r2,0(r2)
 8008fa8:	01420074 	movhi	r5,2049
 8008fac:	29658c04 	addi	r5,r5,-27088
 8008fb0:	10c00217 	ldw	r3,8(r2)
 8008fb4:	d9800104 	addi	r6,sp,4
 8008fb8:	19400115 	stw	r5,4(r3)
 8008fbc:	200b883a 	mov	r5,r4
 8008fc0:	11000217 	ldw	r4,8(r2)
 8008fc4:	80096140 	call	8009614 <__vfprintf_internal>
 8008fc8:	dfc00017 	ldw	ra,0(sp)
 8008fcc:	dec00404 	addi	sp,sp,16
 8008fd0:	f800283a 	ret

08008fd4 <_puts_r>:
 8008fd4:	defffd04 	addi	sp,sp,-12
 8008fd8:	dc000015 	stw	r16,0(sp)
 8008fdc:	2021883a 	mov	r16,r4
 8008fe0:	2809883a 	mov	r4,r5
 8008fe4:	dfc00215 	stw	ra,8(sp)
 8008fe8:	dc400115 	stw	r17,4(sp)
 8008fec:	2823883a 	mov	r17,r5
 8008ff0:	80090680 	call	8009068 <strlen>
 8008ff4:	81400217 	ldw	r5,8(r16)
 8008ff8:	01020074 	movhi	r4,2049
 8008ffc:	21258c04 	addi	r4,r4,-27088
 8009000:	29000115 	stw	r4,4(r5)
 8009004:	100f883a 	mov	r7,r2
 8009008:	880d883a 	mov	r6,r17
 800900c:	8009883a 	mov	r4,r16
 8009010:	80096300 	call	8009630 <__sfvwrite_small_dev>
 8009014:	00ffffc4 	movi	r3,-1
 8009018:	10c00926 	beq	r2,r3,8009040 <_puts_r+0x6c>
 800901c:	81400217 	ldw	r5,8(r16)
 8009020:	01820074 	movhi	r6,2049
 8009024:	01c00044 	movi	r7,1
 8009028:	28800117 	ldw	r2,4(r5)
 800902c:	31a6b504 	addi	r6,r6,-25900
 8009030:	8009883a 	mov	r4,r16
 8009034:	103ee83a 	callr	r2
 8009038:	10bfffe0 	cmpeqi	r2,r2,-1
 800903c:	0085c83a 	sub	r2,zero,r2
 8009040:	dfc00217 	ldw	ra,8(sp)
 8009044:	dc400117 	ldw	r17,4(sp)
 8009048:	dc000017 	ldw	r16,0(sp)
 800904c:	dec00304 	addi	sp,sp,12
 8009050:	f800283a 	ret

08009054 <puts>:
 8009054:	00820074 	movhi	r2,2049
 8009058:	10a6ef04 	addi	r2,r2,-25668
 800905c:	200b883a 	mov	r5,r4
 8009060:	11000017 	ldw	r4,0(r2)
 8009064:	8008fd41 	jmpi	8008fd4 <_puts_r>

08009068 <strlen>:
 8009068:	2005883a 	mov	r2,r4
 800906c:	10c00007 	ldb	r3,0(r2)
 8009070:	18000226 	beq	r3,zero,800907c <strlen+0x14>
 8009074:	10800044 	addi	r2,r2,1
 8009078:	003ffc06 	br	800906c <_gp+0xffff74b4>
 800907c:	1105c83a 	sub	r2,r2,r4
 8009080:	f800283a 	ret

08009084 <print_repeat>:
 8009084:	defffb04 	addi	sp,sp,-20
 8009088:	dc800315 	stw	r18,12(sp)
 800908c:	dc400215 	stw	r17,8(sp)
 8009090:	dc000115 	stw	r16,4(sp)
 8009094:	dfc00415 	stw	ra,16(sp)
 8009098:	2025883a 	mov	r18,r4
 800909c:	2823883a 	mov	r17,r5
 80090a0:	d9800005 	stb	r6,0(sp)
 80090a4:	3821883a 	mov	r16,r7
 80090a8:	04000a0e 	bge	zero,r16,80090d4 <print_repeat+0x50>
 80090ac:	88800117 	ldw	r2,4(r17)
 80090b0:	01c00044 	movi	r7,1
 80090b4:	d80d883a 	mov	r6,sp
 80090b8:	880b883a 	mov	r5,r17
 80090bc:	9009883a 	mov	r4,r18
 80090c0:	103ee83a 	callr	r2
 80090c4:	843fffc4 	addi	r16,r16,-1
 80090c8:	103ff726 	beq	r2,zero,80090a8 <_gp+0xffff74f0>
 80090cc:	00bfffc4 	movi	r2,-1
 80090d0:	00000106 	br	80090d8 <print_repeat+0x54>
 80090d4:	0005883a 	mov	r2,zero
 80090d8:	dfc00417 	ldw	ra,16(sp)
 80090dc:	dc800317 	ldw	r18,12(sp)
 80090e0:	dc400217 	ldw	r17,8(sp)
 80090e4:	dc000117 	ldw	r16,4(sp)
 80090e8:	dec00504 	addi	sp,sp,20
 80090ec:	f800283a 	ret

080090f0 <___vfprintf_internal_r>:
 80090f0:	deffe504 	addi	sp,sp,-108
 80090f4:	d8c00804 	addi	r3,sp,32
 80090f8:	df001915 	stw	fp,100(sp)
 80090fc:	ddc01815 	stw	r23,96(sp)
 8009100:	dd801715 	stw	r22,92(sp)
 8009104:	dd401615 	stw	r21,88(sp)
 8009108:	dd001515 	stw	r20,84(sp)
 800910c:	dcc01415 	stw	r19,80(sp)
 8009110:	dc801315 	stw	r18,76(sp)
 8009114:	dc401215 	stw	r17,72(sp)
 8009118:	dc001115 	stw	r16,68(sp)
 800911c:	dfc01a15 	stw	ra,104(sp)
 8009120:	2027883a 	mov	r19,r4
 8009124:	2839883a 	mov	fp,r5
 8009128:	382d883a 	mov	r22,r7
 800912c:	d9800f15 	stw	r6,60(sp)
 8009130:	0021883a 	mov	r16,zero
 8009134:	d8000e15 	stw	zero,56(sp)
 8009138:	002f883a 	mov	r23,zero
 800913c:	002b883a 	mov	r21,zero
 8009140:	0025883a 	mov	r18,zero
 8009144:	0023883a 	mov	r17,zero
 8009148:	d8000c15 	stw	zero,48(sp)
 800914c:	d8000b15 	stw	zero,44(sp)
 8009150:	0029883a 	mov	r20,zero
 8009154:	d8c00915 	stw	r3,36(sp)
 8009158:	d8c00f17 	ldw	r3,60(sp)
 800915c:	19000003 	ldbu	r4,0(r3)
 8009160:	20803fcc 	andi	r2,r4,255
 8009164:	1080201c 	xori	r2,r2,128
 8009168:	10bfe004 	addi	r2,r2,-128
 800916c:	10011c26 	beq	r2,zero,80095e0 <___vfprintf_internal_r+0x4f0>
 8009170:	00c00044 	movi	r3,1
 8009174:	a0c01426 	beq	r20,r3,80091c8 <___vfprintf_internal_r+0xd8>
 8009178:	1d000216 	blt	r3,r20,8009184 <___vfprintf_internal_r+0x94>
 800917c:	a0000626 	beq	r20,zero,8009198 <___vfprintf_internal_r+0xa8>
 8009180:	00011306 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 8009184:	01400084 	movi	r5,2
 8009188:	a1401d26 	beq	r20,r5,8009200 <___vfprintf_internal_r+0x110>
 800918c:	014000c4 	movi	r5,3
 8009190:	a1402926 	beq	r20,r5,8009238 <___vfprintf_internal_r+0x148>
 8009194:	00010e06 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 8009198:	01400944 	movi	r5,37
 800919c:	1140fb26 	beq	r2,r5,800958c <___vfprintf_internal_r+0x49c>
 80091a0:	e0800117 	ldw	r2,4(fp)
 80091a4:	d9000005 	stb	r4,0(sp)
 80091a8:	01c00044 	movi	r7,1
 80091ac:	d80d883a 	mov	r6,sp
 80091b0:	e00b883a 	mov	r5,fp
 80091b4:	9809883a 	mov	r4,r19
 80091b8:	103ee83a 	callr	r2
 80091bc:	1000d61e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 80091c0:	84000044 	addi	r16,r16,1
 80091c4:	00010206 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 80091c8:	01400c04 	movi	r5,48
 80091cc:	1140f826 	beq	r2,r5,80095b0 <___vfprintf_internal_r+0x4c0>
 80091d0:	01400944 	movi	r5,37
 80091d4:	11400a1e 	bne	r2,r5,8009200 <___vfprintf_internal_r+0x110>
 80091d8:	d8800005 	stb	r2,0(sp)
 80091dc:	e0800117 	ldw	r2,4(fp)
 80091e0:	a00f883a 	mov	r7,r20
 80091e4:	d80d883a 	mov	r6,sp
 80091e8:	e00b883a 	mov	r5,fp
 80091ec:	9809883a 	mov	r4,r19
 80091f0:	103ee83a 	callr	r2
 80091f4:	1000c81e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 80091f8:	84000044 	addi	r16,r16,1
 80091fc:	0000f306 	br	80095cc <___vfprintf_internal_r+0x4dc>
 8009200:	217ff404 	addi	r5,r4,-48
 8009204:	29403fcc 	andi	r5,r5,255
 8009208:	00c00244 	movi	r3,9
 800920c:	19400736 	bltu	r3,r5,800922c <___vfprintf_internal_r+0x13c>
 8009210:	00bfffc4 	movi	r2,-1
 8009214:	88800226 	beq	r17,r2,8009220 <___vfprintf_internal_r+0x130>
 8009218:	8c4002a4 	muli	r17,r17,10
 800921c:	00000106 	br	8009224 <___vfprintf_internal_r+0x134>
 8009220:	0023883a 	mov	r17,zero
 8009224:	2c63883a 	add	r17,r5,r17
 8009228:	0000e206 	br	80095b4 <___vfprintf_internal_r+0x4c4>
 800922c:	01400b84 	movi	r5,46
 8009230:	1140e426 	beq	r2,r5,80095c4 <___vfprintf_internal_r+0x4d4>
 8009234:	05000084 	movi	r20,2
 8009238:	213ff404 	addi	r4,r4,-48
 800923c:	21003fcc 	andi	r4,r4,255
 8009240:	00c00244 	movi	r3,9
 8009244:	19000736 	bltu	r3,r4,8009264 <___vfprintf_internal_r+0x174>
 8009248:	00bfffc4 	movi	r2,-1
 800924c:	90800226 	beq	r18,r2,8009258 <___vfprintf_internal_r+0x168>
 8009250:	948002a4 	muli	r18,r18,10
 8009254:	00000106 	br	800925c <___vfprintf_internal_r+0x16c>
 8009258:	0025883a 	mov	r18,zero
 800925c:	24a5883a 	add	r18,r4,r18
 8009260:	0000db06 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 8009264:	00c01b04 	movi	r3,108
 8009268:	10c0d426 	beq	r2,r3,80095bc <___vfprintf_internal_r+0x4cc>
 800926c:	013fffc4 	movi	r4,-1
 8009270:	91000226 	beq	r18,r4,800927c <___vfprintf_internal_r+0x18c>
 8009274:	d8000b15 	stw	zero,44(sp)
 8009278:	00000106 	br	8009280 <___vfprintf_internal_r+0x190>
 800927c:	04800044 	movi	r18,1
 8009280:	01001a44 	movi	r4,105
 8009284:	11001626 	beq	r2,r4,80092e0 <___vfprintf_internal_r+0x1f0>
 8009288:	20800916 	blt	r4,r2,80092b0 <___vfprintf_internal_r+0x1c0>
 800928c:	010018c4 	movi	r4,99
 8009290:	11008a26 	beq	r2,r4,80094bc <___vfprintf_internal_r+0x3cc>
 8009294:	01001904 	movi	r4,100
 8009298:	11001126 	beq	r2,r4,80092e0 <___vfprintf_internal_r+0x1f0>
 800929c:	01001604 	movi	r4,88
 80092a0:	1100ca1e 	bne	r2,r4,80095cc <___vfprintf_internal_r+0x4dc>
 80092a4:	00c00044 	movi	r3,1
 80092a8:	d8c00e15 	stw	r3,56(sp)
 80092ac:	00001406 	br	8009300 <___vfprintf_internal_r+0x210>
 80092b0:	01001cc4 	movi	r4,115
 80092b4:	11009a26 	beq	r2,r4,8009520 <___vfprintf_internal_r+0x430>
 80092b8:	20800416 	blt	r4,r2,80092cc <___vfprintf_internal_r+0x1dc>
 80092bc:	01001bc4 	movi	r4,111
 80092c0:	1100c21e 	bne	r2,r4,80095cc <___vfprintf_internal_r+0x4dc>
 80092c4:	05400204 	movi	r21,8
 80092c8:	00000e06 	br	8009304 <___vfprintf_internal_r+0x214>
 80092cc:	01001d44 	movi	r4,117
 80092d0:	11000c26 	beq	r2,r4,8009304 <___vfprintf_internal_r+0x214>
 80092d4:	01001e04 	movi	r4,120
 80092d8:	11000926 	beq	r2,r4,8009300 <___vfprintf_internal_r+0x210>
 80092dc:	0000bb06 	br	80095cc <___vfprintf_internal_r+0x4dc>
 80092e0:	b5000104 	addi	r20,r22,4
 80092e4:	b8000726 	beq	r23,zero,8009304 <___vfprintf_internal_r+0x214>
 80092e8:	dd000d15 	stw	r20,52(sp)
 80092ec:	b5800017 	ldw	r22,0(r22)
 80092f0:	b000080e 	bge	r22,zero,8009314 <___vfprintf_internal_r+0x224>
 80092f4:	05adc83a 	sub	r22,zero,r22
 80092f8:	02800044 	movi	r10,1
 80092fc:	00000606 	br	8009318 <___vfprintf_internal_r+0x228>
 8009300:	05400404 	movi	r21,16
 8009304:	b0c00104 	addi	r3,r22,4
 8009308:	d8c00d15 	stw	r3,52(sp)
 800930c:	b5800017 	ldw	r22,0(r22)
 8009310:	002f883a 	mov	r23,zero
 8009314:	0015883a 	mov	r10,zero
 8009318:	d829883a 	mov	r20,sp
 800931c:	b0001426 	beq	r22,zero,8009370 <___vfprintf_internal_r+0x280>
 8009320:	b009883a 	mov	r4,r22
 8009324:	a80b883a 	mov	r5,r21
 8009328:	da801015 	stw	r10,64(sp)
 800932c:	80082ec0 	call	80082ec <__udivsi3>
 8009330:	1549383a 	mul	r4,r2,r21
 8009334:	00c00244 	movi	r3,9
 8009338:	da801017 	ldw	r10,64(sp)
 800933c:	b12dc83a 	sub	r22,r22,r4
 8009340:	1d800216 	blt	r3,r22,800934c <___vfprintf_internal_r+0x25c>
 8009344:	b5800c04 	addi	r22,r22,48
 8009348:	00000506 	br	8009360 <___vfprintf_internal_r+0x270>
 800934c:	d8c00e17 	ldw	r3,56(sp)
 8009350:	18000226 	beq	r3,zero,800935c <___vfprintf_internal_r+0x26c>
 8009354:	b5800dc4 	addi	r22,r22,55
 8009358:	00000106 	br	8009360 <___vfprintf_internal_r+0x270>
 800935c:	b58015c4 	addi	r22,r22,87
 8009360:	a5800005 	stb	r22,0(r20)
 8009364:	a5000044 	addi	r20,r20,1
 8009368:	102d883a 	mov	r22,r2
 800936c:	003feb06 	br	800931c <_gp+0xffff7764>
 8009370:	a6c7c83a 	sub	r3,r20,sp
 8009374:	d8c00a15 	stw	r3,40(sp)
 8009378:	90c5c83a 	sub	r2,r18,r3
 800937c:	00800a0e 	bge	zero,r2,80093a8 <___vfprintf_internal_r+0x2b8>
 8009380:	a085883a 	add	r2,r20,r2
 8009384:	01400c04 	movi	r5,48
 8009388:	d8c00917 	ldw	r3,36(sp)
 800938c:	a009883a 	mov	r4,r20
 8009390:	a0c0032e 	bgeu	r20,r3,80093a0 <___vfprintf_internal_r+0x2b0>
 8009394:	a5000044 	addi	r20,r20,1
 8009398:	21400005 	stb	r5,0(r4)
 800939c:	a0bffa1e 	bne	r20,r2,8009388 <_gp+0xffff77d0>
 80093a0:	a6c7c83a 	sub	r3,r20,sp
 80093a4:	d8c00a15 	stw	r3,40(sp)
 80093a8:	d8c00a17 	ldw	r3,40(sp)
 80093ac:	50d3883a 	add	r9,r10,r3
 80093b0:	d8c00b17 	ldw	r3,44(sp)
 80093b4:	8a6dc83a 	sub	r22,r17,r9
 80093b8:	18001726 	beq	r3,zero,8009418 <___vfprintf_internal_r+0x328>
 80093bc:	50000a26 	beq	r10,zero,80093e8 <___vfprintf_internal_r+0x2f8>
 80093c0:	00800b44 	movi	r2,45
 80093c4:	d8800805 	stb	r2,32(sp)
 80093c8:	e0800117 	ldw	r2,4(fp)
 80093cc:	01c00044 	movi	r7,1
 80093d0:	d9800804 	addi	r6,sp,32
 80093d4:	e00b883a 	mov	r5,fp
 80093d8:	9809883a 	mov	r4,r19
 80093dc:	103ee83a 	callr	r2
 80093e0:	10004d1e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 80093e4:	84000044 	addi	r16,r16,1
 80093e8:	0580070e 	bge	zero,r22,8009408 <___vfprintf_internal_r+0x318>
 80093ec:	b00f883a 	mov	r7,r22
 80093f0:	01800c04 	movi	r6,48
 80093f4:	e00b883a 	mov	r5,fp
 80093f8:	9809883a 	mov	r4,r19
 80093fc:	80090840 	call	8009084 <print_repeat>
 8009400:	1000451e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 8009404:	85a1883a 	add	r16,r16,r22
 8009408:	d8c00a17 	ldw	r3,40(sp)
 800940c:	a013883a 	mov	r9,r20
 8009410:	1d2dc83a 	sub	r22,r3,r20
 8009414:	00002206 	br	80094a0 <___vfprintf_internal_r+0x3b0>
 8009418:	0580090e 	bge	zero,r22,8009440 <___vfprintf_internal_r+0x350>
 800941c:	b00f883a 	mov	r7,r22
 8009420:	01800804 	movi	r6,32
 8009424:	e00b883a 	mov	r5,fp
 8009428:	9809883a 	mov	r4,r19
 800942c:	da801015 	stw	r10,64(sp)
 8009430:	80090840 	call	8009084 <print_repeat>
 8009434:	da801017 	ldw	r10,64(sp)
 8009438:	1000371e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 800943c:	85a1883a 	add	r16,r16,r22
 8009440:	503ff126 	beq	r10,zero,8009408 <_gp+0xffff7850>
 8009444:	00800b44 	movi	r2,45
 8009448:	d8800805 	stb	r2,32(sp)
 800944c:	e0800117 	ldw	r2,4(fp)
 8009450:	01c00044 	movi	r7,1
 8009454:	d9800804 	addi	r6,sp,32
 8009458:	e00b883a 	mov	r5,fp
 800945c:	9809883a 	mov	r4,r19
 8009460:	103ee83a 	callr	r2
 8009464:	10002c1e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 8009468:	84000044 	addi	r16,r16,1
 800946c:	003fe606 	br	8009408 <_gp+0xffff7850>
 8009470:	4a7fffc4 	addi	r9,r9,-1
 8009474:	48800003 	ldbu	r2,0(r9)
 8009478:	01c00044 	movi	r7,1
 800947c:	d9800804 	addi	r6,sp,32
 8009480:	d8800805 	stb	r2,32(sp)
 8009484:	e0800117 	ldw	r2,4(fp)
 8009488:	e00b883a 	mov	r5,fp
 800948c:	da401015 	stw	r9,64(sp)
 8009490:	9809883a 	mov	r4,r19
 8009494:	103ee83a 	callr	r2
 8009498:	da401017 	ldw	r9,64(sp)
 800949c:	10001e1e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 80094a0:	8245c83a 	sub	r2,r16,r9
 80094a4:	4d89883a 	add	r4,r9,r22
 80094a8:	a085883a 	add	r2,r20,r2
 80094ac:	013ff016 	blt	zero,r4,8009470 <_gp+0xffff78b8>
 80094b0:	1021883a 	mov	r16,r2
 80094b4:	dd800d17 	ldw	r22,52(sp)
 80094b8:	00004406 	br	80095cc <___vfprintf_internal_r+0x4dc>
 80094bc:	00800044 	movi	r2,1
 80094c0:	1440080e 	bge	r2,r17,80094e4 <___vfprintf_internal_r+0x3f4>
 80094c4:	8d3fffc4 	addi	r20,r17,-1
 80094c8:	a00f883a 	mov	r7,r20
 80094cc:	01800804 	movi	r6,32
 80094d0:	e00b883a 	mov	r5,fp
 80094d4:	9809883a 	mov	r4,r19
 80094d8:	80090840 	call	8009084 <print_repeat>
 80094dc:	10000e1e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 80094e0:	8521883a 	add	r16,r16,r20
 80094e4:	b0800017 	ldw	r2,0(r22)
 80094e8:	01c00044 	movi	r7,1
 80094ec:	d80d883a 	mov	r6,sp
 80094f0:	d8800005 	stb	r2,0(sp)
 80094f4:	e0800117 	ldw	r2,4(fp)
 80094f8:	e00b883a 	mov	r5,fp
 80094fc:	9809883a 	mov	r4,r19
 8009500:	b5000104 	addi	r20,r22,4
 8009504:	103ee83a 	callr	r2
 8009508:	1000031e 	bne	r2,zero,8009518 <___vfprintf_internal_r+0x428>
 800950c:	84000044 	addi	r16,r16,1
 8009510:	a02d883a 	mov	r22,r20
 8009514:	00002d06 	br	80095cc <___vfprintf_internal_r+0x4dc>
 8009518:	00bfffc4 	movi	r2,-1
 800951c:	00003106 	br	80095e4 <___vfprintf_internal_r+0x4f4>
 8009520:	b5000017 	ldw	r20,0(r22)
 8009524:	b0c00104 	addi	r3,r22,4
 8009528:	d8c00a15 	stw	r3,40(sp)
 800952c:	a009883a 	mov	r4,r20
 8009530:	80090680 	call	8009068 <strlen>
 8009534:	8893c83a 	sub	r9,r17,r2
 8009538:	102d883a 	mov	r22,r2
 800953c:	0240090e 	bge	zero,r9,8009564 <___vfprintf_internal_r+0x474>
 8009540:	480f883a 	mov	r7,r9
 8009544:	01800804 	movi	r6,32
 8009548:	e00b883a 	mov	r5,fp
 800954c:	9809883a 	mov	r4,r19
 8009550:	da401015 	stw	r9,64(sp)
 8009554:	80090840 	call	8009084 <print_repeat>
 8009558:	da401017 	ldw	r9,64(sp)
 800955c:	103fee1e 	bne	r2,zero,8009518 <_gp+0xffff7960>
 8009560:	8261883a 	add	r16,r16,r9
 8009564:	e0800117 	ldw	r2,4(fp)
 8009568:	b00f883a 	mov	r7,r22
 800956c:	a00d883a 	mov	r6,r20
 8009570:	e00b883a 	mov	r5,fp
 8009574:	9809883a 	mov	r4,r19
 8009578:	103ee83a 	callr	r2
 800957c:	103fe61e 	bne	r2,zero,8009518 <_gp+0xffff7960>
 8009580:	85a1883a 	add	r16,r16,r22
 8009584:	dd800a17 	ldw	r22,40(sp)
 8009588:	00001006 	br	80095cc <___vfprintf_internal_r+0x4dc>
 800958c:	05c00044 	movi	r23,1
 8009590:	04bfffc4 	movi	r18,-1
 8009594:	d8000e15 	stw	zero,56(sp)
 8009598:	05400284 	movi	r21,10
 800959c:	9023883a 	mov	r17,r18
 80095a0:	d8000c15 	stw	zero,48(sp)
 80095a4:	d8000b15 	stw	zero,44(sp)
 80095a8:	b829883a 	mov	r20,r23
 80095ac:	00000806 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 80095b0:	dd000b15 	stw	r20,44(sp)
 80095b4:	05000084 	movi	r20,2
 80095b8:	00000506 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 80095bc:	00c00044 	movi	r3,1
 80095c0:	d8c00c15 	stw	r3,48(sp)
 80095c4:	050000c4 	movi	r20,3
 80095c8:	00000106 	br	80095d0 <___vfprintf_internal_r+0x4e0>
 80095cc:	0029883a 	mov	r20,zero
 80095d0:	d8c00f17 	ldw	r3,60(sp)
 80095d4:	18c00044 	addi	r3,r3,1
 80095d8:	d8c00f15 	stw	r3,60(sp)
 80095dc:	003ede06 	br	8009158 <_gp+0xffff75a0>
 80095e0:	8005883a 	mov	r2,r16
 80095e4:	dfc01a17 	ldw	ra,104(sp)
 80095e8:	df001917 	ldw	fp,100(sp)
 80095ec:	ddc01817 	ldw	r23,96(sp)
 80095f0:	dd801717 	ldw	r22,92(sp)
 80095f4:	dd401617 	ldw	r21,88(sp)
 80095f8:	dd001517 	ldw	r20,84(sp)
 80095fc:	dcc01417 	ldw	r19,80(sp)
 8009600:	dc801317 	ldw	r18,76(sp)
 8009604:	dc401217 	ldw	r17,72(sp)
 8009608:	dc001117 	ldw	r16,68(sp)
 800960c:	dec01b04 	addi	sp,sp,108
 8009610:	f800283a 	ret

08009614 <__vfprintf_internal>:
 8009614:	00820074 	movhi	r2,2049
 8009618:	10a6ef04 	addi	r2,r2,-25668
 800961c:	300f883a 	mov	r7,r6
 8009620:	280d883a 	mov	r6,r5
 8009624:	200b883a 	mov	r5,r4
 8009628:	11000017 	ldw	r4,0(r2)
 800962c:	80090f01 	jmpi	80090f0 <___vfprintf_internal_r>

08009630 <__sfvwrite_small_dev>:
 8009630:	2880000b 	ldhu	r2,0(r5)
 8009634:	1080020c 	andi	r2,r2,8
 8009638:	10002126 	beq	r2,zero,80096c0 <__sfvwrite_small_dev+0x90>
 800963c:	2880008f 	ldh	r2,2(r5)
 8009640:	defffa04 	addi	sp,sp,-24
 8009644:	dc000015 	stw	r16,0(sp)
 8009648:	dfc00515 	stw	ra,20(sp)
 800964c:	dd000415 	stw	r20,16(sp)
 8009650:	dcc00315 	stw	r19,12(sp)
 8009654:	dc800215 	stw	r18,8(sp)
 8009658:	dc400115 	stw	r17,4(sp)
 800965c:	2821883a 	mov	r16,r5
 8009660:	10001216 	blt	r2,zero,80096ac <__sfvwrite_small_dev+0x7c>
 8009664:	2027883a 	mov	r19,r4
 8009668:	3025883a 	mov	r18,r6
 800966c:	3823883a 	mov	r17,r7
 8009670:	05010004 	movi	r20,1024
 8009674:	04400b0e 	bge	zero,r17,80096a4 <__sfvwrite_small_dev+0x74>
 8009678:	880f883a 	mov	r7,r17
 800967c:	a440010e 	bge	r20,r17,8009684 <__sfvwrite_small_dev+0x54>
 8009680:	01c10004 	movi	r7,1024
 8009684:	8140008f 	ldh	r5,2(r16)
 8009688:	900d883a 	mov	r6,r18
 800968c:	9809883a 	mov	r4,r19
 8009690:	80096e80 	call	80096e8 <_write_r>
 8009694:	0080050e 	bge	zero,r2,80096ac <__sfvwrite_small_dev+0x7c>
 8009698:	88a3c83a 	sub	r17,r17,r2
 800969c:	90a5883a 	add	r18,r18,r2
 80096a0:	003ff406 	br	8009674 <_gp+0xffff7abc>
 80096a4:	0005883a 	mov	r2,zero
 80096a8:	00000706 	br	80096c8 <__sfvwrite_small_dev+0x98>
 80096ac:	8080000b 	ldhu	r2,0(r16)
 80096b0:	10801014 	ori	r2,r2,64
 80096b4:	8080000d 	sth	r2,0(r16)
 80096b8:	00bfffc4 	movi	r2,-1
 80096bc:	00000206 	br	80096c8 <__sfvwrite_small_dev+0x98>
 80096c0:	00bfffc4 	movi	r2,-1
 80096c4:	f800283a 	ret
 80096c8:	dfc00517 	ldw	ra,20(sp)
 80096cc:	dd000417 	ldw	r20,16(sp)
 80096d0:	dcc00317 	ldw	r19,12(sp)
 80096d4:	dc800217 	ldw	r18,8(sp)
 80096d8:	dc400117 	ldw	r17,4(sp)
 80096dc:	dc000017 	ldw	r16,0(sp)
 80096e0:	dec00604 	addi	sp,sp,24
 80096e4:	f800283a 	ret

080096e8 <_write_r>:
 80096e8:	defffd04 	addi	sp,sp,-12
 80096ec:	dc000015 	stw	r16,0(sp)
 80096f0:	04020074 	movhi	r16,2049
 80096f4:	dc400115 	stw	r17,4(sp)
 80096f8:	84272e04 	addi	r16,r16,-25416
 80096fc:	2023883a 	mov	r17,r4
 8009700:	2809883a 	mov	r4,r5
 8009704:	300b883a 	mov	r5,r6
 8009708:	380d883a 	mov	r6,r7
 800970c:	dfc00215 	stw	ra,8(sp)
 8009710:	80000015 	stw	zero,0(r16)
 8009714:	800984c0 	call	800984c <write>
 8009718:	00ffffc4 	movi	r3,-1
 800971c:	10c0031e 	bne	r2,r3,800972c <_write_r+0x44>
 8009720:	80c00017 	ldw	r3,0(r16)
 8009724:	18000126 	beq	r3,zero,800972c <_write_r+0x44>
 8009728:	88c00015 	stw	r3,0(r17)
 800972c:	dfc00217 	ldw	ra,8(sp)
 8009730:	dc400117 	ldw	r17,4(sp)
 8009734:	dc000017 	ldw	r16,0(sp)
 8009738:	dec00304 	addi	sp,sp,12
 800973c:	f800283a 	ret

08009740 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8009740:	deffff04 	addi	sp,sp,-4
 8009744:	01020074 	movhi	r4,2049
 8009748:	01420074 	movhi	r5,2049
 800974c:	dfc00015 	stw	ra,0(sp)
 8009750:	2126b604 	addi	r4,r4,-25896
 8009754:	2966f204 	addi	r5,r5,-25656

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8009758:	2140061e 	bne	r4,r5,8009774 <alt_load+0x34>
 800975c:	01020074 	movhi	r4,2049
 8009760:	01420074 	movhi	r5,2049
 8009764:	21200804 	addi	r4,r4,-32736
 8009768:	29600804 	addi	r5,r5,-32736
 800976c:	2140121e 	bne	r4,r5,80097b8 <alt_load+0x78>
 8009770:	00000b06 	br	80097a0 <alt_load+0x60>
 8009774:	00c20074 	movhi	r3,2049
 8009778:	18e6f204 	addi	r3,r3,-25656
 800977c:	1907c83a 	sub	r3,r3,r4
 8009780:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8009784:	10fff526 	beq	r2,r3,800975c <_gp+0xffff7ba4>
    {
      *to++ = *from++;
 8009788:	114f883a 	add	r7,r2,r5
 800978c:	39c00017 	ldw	r7,0(r7)
 8009790:	110d883a 	add	r6,r2,r4
 8009794:	10800104 	addi	r2,r2,4
 8009798:	31c00015 	stw	r7,0(r6)
 800979c:	003ff906 	br	8009784 <_gp+0xffff7bcc>
 80097a0:	01020074 	movhi	r4,2049
 80097a4:	01420074 	movhi	r5,2049
 80097a8:	21265a04 	addi	r4,r4,-26264
 80097ac:	29665a04 	addi	r5,r5,-26264

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80097b0:	2140101e 	bne	r4,r5,80097f4 <alt_load+0xb4>
 80097b4:	00000b06 	br	80097e4 <alt_load+0xa4>
 80097b8:	00c20074 	movhi	r3,2049
 80097bc:	18e00804 	addi	r3,r3,-32736
 80097c0:	1907c83a 	sub	r3,r3,r4
 80097c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80097c8:	10fff526 	beq	r2,r3,80097a0 <_gp+0xffff7be8>
    {
      *to++ = *from++;
 80097cc:	114f883a 	add	r7,r2,r5
 80097d0:	39c00017 	ldw	r7,0(r7)
 80097d4:	110d883a 	add	r6,r2,r4
 80097d8:	10800104 	addi	r2,r2,4
 80097dc:	31c00015 	stw	r7,0(r6)
 80097e0:	003ff906 	br	80097c8 <_gp+0xffff7c10>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80097e4:	80099040 	call	8009904 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 80097e8:	dfc00017 	ldw	ra,0(sp)
 80097ec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 80097f0:	800991c1 	jmpi	800991c <alt_icache_flush_all>
 80097f4:	00c20074 	movhi	r3,2049
 80097f8:	18e6b604 	addi	r3,r3,-25896
 80097fc:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8009800:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8009804:	18bff726 	beq	r3,r2,80097e4 <_gp+0xffff7c2c>
    {
      *to++ = *from++;
 8009808:	114f883a 	add	r7,r2,r5
 800980c:	39c00017 	ldw	r7,0(r7)
 8009810:	110d883a 	add	r6,r2,r4
 8009814:	10800104 	addi	r2,r2,4
 8009818:	31c00015 	stw	r7,0(r6)
 800981c:	003ff906 	br	8009804 <_gp+0xffff7c4c>

08009820 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8009820:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8009824:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8009828:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800982c:	80098ac0 	call	80098ac <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8009830:	80098cc0 	call	80098cc <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8009834:	d1a04117 	ldw	r6,-32508(gp)
 8009838:	d1604217 	ldw	r5,-32504(gp)
 800983c:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8009840:	dfc00017 	ldw	ra,0(sp)
 8009844:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8009848:	800806c1 	jmpi	800806c <main>

0800984c <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 800984c:	00800044 	movi	r2,1
 8009850:	20800226 	beq	r4,r2,800985c <write+0x10>
 8009854:	00800084 	movi	r2,2
 8009858:	2080041e 	bne	r4,r2,800986c <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 800985c:	01020074 	movhi	r4,2049
 8009860:	000f883a 	mov	r7,zero
 8009864:	2126f004 	addi	r4,r4,-25664
 8009868:	80098d01 	jmpi	80098d0 <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 800986c:	d0a00317 	ldw	r2,-32756(gp)
 8009870:	10000926 	beq	r2,zero,8009898 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8009874:	deffff04 	addi	sp,sp,-4
 8009878:	dfc00015 	stw	ra,0(sp)
 800987c:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8009880:	00c01444 	movi	r3,81
 8009884:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8009888:	00bfffc4 	movi	r2,-1
 800988c:	dfc00017 	ldw	ra,0(sp)
 8009890:	dec00104 	addi	sp,sp,4
 8009894:	f800283a 	ret
 8009898:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 800989c:	00c01444 	movi	r3,81
 80098a0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 80098a4:	00bfffc4 	movi	r2,-1
 80098a8:	f800283a 	ret

080098ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80098ac:	deffff04 	addi	sp,sp,-4
 80098b0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 80098b4:	80099280 	call	8009928 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80098b8:	00800044 	movi	r2,1
 80098bc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80098c0:	dfc00017 	ldw	ra,0(sp)
 80098c4:	dec00104 	addi	sp,sp,4
 80098c8:	f800283a 	ret

080098cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80098cc:	f800283a 	ret

080098d0 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 80098d0:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80098d4:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 80098d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80098dc:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 80098e0:	2980072e 	bgeu	r5,r6,8009900 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80098e4:	38c00037 	ldwio	r3,0(r7)
 80098e8:	18ffffec 	andhi	r3,r3,65535
 80098ec:	183ffc26 	beq	r3,zero,80098e0 <_gp+0xffff7d28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 80098f0:	28c00007 	ldb	r3,0(r5)
 80098f4:	20c00035 	stwio	r3,0(r4)
 80098f8:	29400044 	addi	r5,r5,1
 80098fc:	003ff806 	br	80098e0 <_gp+0xffff7d28>

  return count;
}
 8009900:	f800283a 	ret

08009904 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8009904:	0005883a 	mov	r2,zero
 8009908:	00c10004 	movi	r3,1024
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 800990c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8009910:	10800804 	addi	r2,r2,32
 8009914:	10fffd1e 	bne	r2,r3,800990c <_gp+0xffff7d54>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8009918:	f800283a 	ret

0800991c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800991c:	01408004 	movi	r5,512
 8009920:	0009883a 	mov	r4,zero
 8009924:	80099301 	jmpi	8009930 <alt_icache_flush>

08009928 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8009928:	000170fa 	wrctl	ienable,zero
 800992c:	f800283a 	ret

08009930 <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 8009930:	00808004 	movi	r2,512
 8009934:	1140012e 	bgeu	r2,r5,800993c <alt_icache_flush+0xc>
 8009938:	100b883a 	mov	r5,r2
 800993c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8009940:	2005883a 	mov	r2,r4
 8009944:	1140032e 	bgeu	r2,r5,8009954 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8009948:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800994c:	10800804 	addi	r2,r2,32
 8009950:	003ffc06 	br	8009944 <_gp+0xffff7d8c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8009954:	210007cc 	andi	r4,r4,31
 8009958:	20000126 	beq	r4,zero,8009960 <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800995c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8009960:	0000203a 	flushp
 8009964:	f800283a 	ret
