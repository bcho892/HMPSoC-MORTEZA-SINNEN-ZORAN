
nios_hmpsoc.elf:     file format elf32-littlenios2
nios_hmpsoc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08008020

Program Header:
    LOAD off    0x00001000 vaddr 0x08008000 paddr 0x08008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08008020 paddr 0x08008020 align 2**12
         filesz 0x00000ce4 memsz 0x00000ce4 flags r-x
    LOAD off    0x00001d04 vaddr 0x08008d04 paddr 0x08008df4 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001ee4 vaddr 0x08008ee4 paddr 0x08008ee4 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08008000  08008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08008020  08008020  00001df4  2**0
                  CONTENTS
  2 .text         00000c84  08008020  08008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000060  08008ca4  08008ca4  00001ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  08008d04  08008df4  00001d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  08008ee4  08008ee4  00001ee4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  08008ef4  08008ef4  00001df4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001df4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002b0  00000000  00000000  00001e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00003b83  00000000  00000000  000020c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001470  00000000  00000000  00005c4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001792  00000000  00000000  000070bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000003ac  00000000  00000000  00008850  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000f91  00000000  00000000  00008bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001309  00000000  00000000  00009b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0000ae98  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000268  00000000  00000000  0000aec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000c17d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0000c180  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000c183  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000c184  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0000c185  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0000c18e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000c197  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0000c1a0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000046  00000000  00000000  0000c1aa  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0005713f  00000000  00000000  0000c1f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08008000 l    d  .entry	00000000 .entry
08008020 l    d  .exceptions	00000000 .exceptions
08008020 l    d  .text	00000000 .text
08008ca4 l    d  .rodata	00000000 .rodata
08008d04 l    d  .rwdata	00000000 .rwdata
08008ee4 l    d  .bss	00000000 .bss
08008ef4 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_hmpsoc_bsp//obj/HAL/src/crt0.o
08008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800820c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
08008d04 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
08008b5c g     F .text	0000002c alt_main
0800815c g     F .text	00000080 _puts_r
08008df4 g       *ABS*	00000000 __flash_rwdata_start
08008110 g     F .text	0000004c printf
08008dec g     O .rwdata	00000004 jtag_uart
08008c64 g     F .text	00000008 altera_nios2_gen2_irq_init
08008000 g     F .entry	0000001c __reset
08008020 g       *ABS*	00000000 __flash_exceptions_start
08008ee4 g     O .bss	00000004 errno
08008eec g     O .bss	00000004 alt_argv
08010de4 g       *ABS*	00000000 _gp
080081dc g     F .text	00000014 puts
080080d4 g     F .text	0000003c _printf_r
080089c0 g     F .text	00000064 .hidden __udivsi3
08008c6c g     F .text	00000038 alt_icache_flush
08008de4 g     O .rwdata	00000004 _global_impure_ptr
08008ef4 g       *ABS*	00000000 __bss_end
08008c40 g     F .text	00000018 alt_dcache_flush_all
08008df4 g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
08008b88 g     F .text	00000060 write
08008d04 g       *ABS*	00000000 __ram_rodata_end
08008a24 g     F .text	00000058 .hidden __umodsi3
08008ef4 g       *ABS*	00000000 end
0800d000 g       *ABS*	00000000 __alt_stack_pointer
08008c0c g     F .text	00000034 altera_avalon_jtag_uart_write
08008278 g     F .text	00000524 ___vfprintf_internal_r
08008020 g     F .text	0000004c _start
08008c08 g     F .text	00000004 alt_sys_init
08008d04 g       *ABS*	00000000 __ram_rwdata_start
08008ca4 g       *ABS*	00000000 __ram_rodata_start
08008ef4 g       *ABS*	00000000 __alt_stack_base
080087b8 g     F .text	000000b8 __sfvwrite_small_dev
08008ee4 g       *ABS*	00000000 __bss_start
0800806c g     F .text	00000068 main
08008ee8 g     O .bss	00000004 alt_envp
08008df0 g     O .rwdata	00000004 alt_errno
080088c8 g     F .text	00000084 .hidden __divsi3
08008ca4 g       *ABS*	00000000 __flash_rodata_start
08008be8 g     F .text	00000020 alt_irq_init
08008870 g     F .text	00000058 _write_r
08008de8 g     O .rwdata	00000004 _impure_ptr
08008ef0 g     O .bss	00000004 alt_argc
08008020 g       *ABS*	00000000 __ram_exceptions_start
08008df4 g       *ABS*	00000000 _edata
08008ef4 g       *ABS*	00000000 _end
08008020 g       *ABS*	00000000 __ram_exceptions_end
0800894c g     F .text	00000074 .hidden __modsi3
0800d000 g       *ABS*	00000000 __alt_data_end
0800801c g       .entry	00000000 _exit
080081f0 g     F .text	0000001c strlen
08008c58 g     F .text	0000000c alt_icache_flush_all
0800879c g     F .text	0000001c __vfprintf_internal
08008a7c g     F .text	000000e0 alt_load



Disassembly of section .entry:

08008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8008000:	00808014 	movui	r2,512
#endif

0:
    initi r2
 8008004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8008008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800800c:	00bffd16 	blt	zero,r2,8008004 <_gp+0xffff7220>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8008010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8008014:	08600814 	ori	at,at,32800
    jmp r1
 8008018:	0800683a 	jmp	at

0800801c <_exit>:
 800801c:	00000000 	call	0 <__reset-0x8008000>

Disassembly of section .text:

08008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8008020:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 8008024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8008028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800802c:	00bffd16 	blt	zero,r2,8008024 <_gp+0xffff7240>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8008030:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 8008034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
 8008038:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800803c:	d6837914 	ori	gp,gp,3556
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8008040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8008044:	10a3b914 	ori	r2,r2,36580

    movhi r3, %hi(__bss_end)
 8008048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800804c:	18e3bd14 	ori	r3,r3,36596

    beq r2, r3, 1f
 8008050:	10c00326 	beq	r2,r3,8008060 <_start+0x40>

0:
    stw zero, (r2)
 8008054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8008058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800805c:	10fffd36 	bltu	r2,r3,8008054 <_gp+0xffff7270>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8008060:	8008a7c0 	call	8008a7c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8008064:	8008b5c0 	call	8008b5c <alt_main>

08008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8008068:	003fff06 	br	8008068 <_gp+0xffff7284>

0800806c <main>:
#include <stdio.h>

#define SEND_DATA(data) IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data)
#define SEND_ADDR(data) IOWR_ALTERA_AVALON_PIO_DATA(ADDR_OUT_BASE, data)

int main() {
 800806c:	defffd04 	addi	sp,sp,-12
    printf("Hello from Nios II!\n");
 8008070:	01020074 	movhi	r4,2049
#include <stdio.h>

#define SEND_DATA(data) IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data)
#define SEND_ADDR(data) IOWR_ALTERA_AVALON_PIO_DATA(ADDR_OUT_BASE, data)

int main() {
 8008074:	dc000015 	stw	r16,0(sp)
    printf("Hello from Nios II!\n");
 8008078:	21232904 	addi	r4,r4,-29532
            printf("Correlation Detected: Cock Cycles: %u\n", datain & 0x0FFFFFFF);
            continue;
        }

        if ((datain >> 28) == 0b1011) {
            printf("Peak Detected: Cock Cycles: %u\n", datain & 0x0FFFFFFF);
 800807c:	04040034 	movhi	r16,4096
#include <stdio.h>

#define SEND_DATA(data) IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data)
#define SEND_ADDR(data) IOWR_ALTERA_AVALON_PIO_DATA(ADDR_OUT_BASE, data)

int main() {
 8008080:	dc400115 	stw	r17,4(sp)
 8008084:	dfc00215 	stw	ra,8(sp)
    // SEND_ADDR(0x01);
    // SEND_DATA(0x00000000);

    for (;;) {

        ALT_CI_BIGLARI_SSEG_0(0x69);
 8008088:	04401a44 	movi	r17,105

#define SEND_DATA(data) IOWR_ALTERA_AVALON_PIO_DATA(DATA_OUT_BASE, data)
#define SEND_ADDR(data) IOWR_ALTERA_AVALON_PIO_DATA(ADDR_OUT_BASE, data)

int main() {
    printf("Hello from Nios II!\n");
 800808c:	80081dc0 	call	80081dc <puts>
            printf("Correlation Detected: Cock Cycles: %u\n", datain & 0x0FFFFFFF);
            continue;
        }

        if ((datain >> 28) == 0b1011) {
            printf("Peak Detected: Cock Cycles: %u\n", datain & 0x0FFFFFFF);
 8008090:	843fffc4 	addi	r16,r16,-1
    // SEND_ADDR(0x01);
    // SEND_DATA(0x00000000);

    for (;;) {

        ALT_CI_BIGLARI_SSEG_0(0x69);
 8008094:	8805c072 	custom	1,r2,r17,zero
        uint32_t datain = ALT_CI_BIGLARI_READ_0;
 8008098:	000bc032 	custom	0,r5,zero,zero

        if (((datain >> 28) == 0b1001)) {
 800809c:	2804d73a 	srli	r2,r5,28
 80080a0:	00c00244 	movi	r3,9
 80080a4:	10c0041e 	bne	r2,r3,80080b8 <main+0x4c>
            printf("Correlation Detected: Cock Cycles: %u\n", datain & 0x0FFFFFFF);
 80080a8:	01020074 	movhi	r4,2049
 80080ac:	2c0a703a 	and	r5,r5,r16
 80080b0:	21232e04 	addi	r4,r4,-29512
 80080b4:	00000506 	br	80080cc <main+0x60>
            continue;
        }

        if ((datain >> 28) == 0b1011) {
 80080b8:	00c002c4 	movi	r3,11
 80080bc:	10fff51e 	bne	r2,r3,8008094 <_gp+0xffff72b0>
            printf("Peak Detected: Cock Cycles: %u\n", datain & 0x0FFFFFFF);
 80080c0:	01020074 	movhi	r4,2049
 80080c4:	2c0a703a 	and	r5,r5,r16
 80080c8:	21233804 	addi	r4,r4,-29472
 80080cc:	80081100 	call	8008110 <printf>
 80080d0:	003ff006 	br	8008094 <_gp+0xffff72b0>

080080d4 <_printf_r>:
 80080d4:	defffd04 	addi	sp,sp,-12
 80080d8:	dfc00015 	stw	ra,0(sp)
 80080dc:	d9800115 	stw	r6,4(sp)
 80080e0:	d9c00215 	stw	r7,8(sp)
 80080e4:	20c00217 	ldw	r3,8(r4)
 80080e8:	01820074 	movhi	r6,2049
 80080ec:	31a1ee04 	addi	r6,r6,-30792
 80080f0:	19800115 	stw	r6,4(r3)
 80080f4:	280d883a 	mov	r6,r5
 80080f8:	21400217 	ldw	r5,8(r4)
 80080fc:	d9c00104 	addi	r7,sp,4
 8008100:	80082780 	call	8008278 <___vfprintf_internal_r>
 8008104:	dfc00017 	ldw	ra,0(sp)
 8008108:	dec00304 	addi	sp,sp,12
 800810c:	f800283a 	ret

08008110 <printf>:
 8008110:	defffc04 	addi	sp,sp,-16
 8008114:	dfc00015 	stw	ra,0(sp)
 8008118:	d9400115 	stw	r5,4(sp)
 800811c:	d9800215 	stw	r6,8(sp)
 8008120:	d9c00315 	stw	r7,12(sp)
 8008124:	00820074 	movhi	r2,2049
 8008128:	10a37a04 	addi	r2,r2,-29208
 800812c:	10800017 	ldw	r2,0(r2)
 8008130:	01420074 	movhi	r5,2049
 8008134:	2961ee04 	addi	r5,r5,-30792
 8008138:	10c00217 	ldw	r3,8(r2)
 800813c:	d9800104 	addi	r6,sp,4
 8008140:	19400115 	stw	r5,4(r3)
 8008144:	200b883a 	mov	r5,r4
 8008148:	11000217 	ldw	r4,8(r2)
 800814c:	800879c0 	call	800879c <__vfprintf_internal>
 8008150:	dfc00017 	ldw	ra,0(sp)
 8008154:	dec00404 	addi	sp,sp,16
 8008158:	f800283a 	ret

0800815c <_puts_r>:
 800815c:	defffd04 	addi	sp,sp,-12
 8008160:	dc000015 	stw	r16,0(sp)
 8008164:	2021883a 	mov	r16,r4
 8008168:	2809883a 	mov	r4,r5
 800816c:	dfc00215 	stw	ra,8(sp)
 8008170:	dc400115 	stw	r17,4(sp)
 8008174:	2823883a 	mov	r17,r5
 8008178:	80081f00 	call	80081f0 <strlen>
 800817c:	81400217 	ldw	r5,8(r16)
 8008180:	01020074 	movhi	r4,2049
 8008184:	2121ee04 	addi	r4,r4,-30792
 8008188:	29000115 	stw	r4,4(r5)
 800818c:	100f883a 	mov	r7,r2
 8008190:	880d883a 	mov	r6,r17
 8008194:	8009883a 	mov	r4,r16
 8008198:	80087b80 	call	80087b8 <__sfvwrite_small_dev>
 800819c:	00ffffc4 	movi	r3,-1
 80081a0:	10c00926 	beq	r2,r3,80081c8 <_puts_r+0x6c>
 80081a4:	81400217 	ldw	r5,8(r16)
 80081a8:	01820074 	movhi	r6,2049
 80081ac:	01c00044 	movi	r7,1
 80081b0:	28800117 	ldw	r2,4(r5)
 80081b4:	31a34004 	addi	r6,r6,-29440
 80081b8:	8009883a 	mov	r4,r16
 80081bc:	103ee83a 	callr	r2
 80081c0:	10bfffe0 	cmpeqi	r2,r2,-1
 80081c4:	0085c83a 	sub	r2,zero,r2
 80081c8:	dfc00217 	ldw	ra,8(sp)
 80081cc:	dc400117 	ldw	r17,4(sp)
 80081d0:	dc000017 	ldw	r16,0(sp)
 80081d4:	dec00304 	addi	sp,sp,12
 80081d8:	f800283a 	ret

080081dc <puts>:
 80081dc:	00820074 	movhi	r2,2049
 80081e0:	10a37a04 	addi	r2,r2,-29208
 80081e4:	200b883a 	mov	r5,r4
 80081e8:	11000017 	ldw	r4,0(r2)
 80081ec:	800815c1 	jmpi	800815c <_puts_r>

080081f0 <strlen>:
 80081f0:	2005883a 	mov	r2,r4
 80081f4:	10c00007 	ldb	r3,0(r2)
 80081f8:	18000226 	beq	r3,zero,8008204 <strlen+0x14>
 80081fc:	10800044 	addi	r2,r2,1
 8008200:	003ffc06 	br	80081f4 <_gp+0xffff7410>
 8008204:	1105c83a 	sub	r2,r2,r4
 8008208:	f800283a 	ret

0800820c <print_repeat>:
 800820c:	defffb04 	addi	sp,sp,-20
 8008210:	dc800315 	stw	r18,12(sp)
 8008214:	dc400215 	stw	r17,8(sp)
 8008218:	dc000115 	stw	r16,4(sp)
 800821c:	dfc00415 	stw	ra,16(sp)
 8008220:	2025883a 	mov	r18,r4
 8008224:	2823883a 	mov	r17,r5
 8008228:	d9800005 	stb	r6,0(sp)
 800822c:	3821883a 	mov	r16,r7
 8008230:	04000a0e 	bge	zero,r16,800825c <print_repeat+0x50>
 8008234:	88800117 	ldw	r2,4(r17)
 8008238:	01c00044 	movi	r7,1
 800823c:	d80d883a 	mov	r6,sp
 8008240:	880b883a 	mov	r5,r17
 8008244:	9009883a 	mov	r4,r18
 8008248:	103ee83a 	callr	r2
 800824c:	843fffc4 	addi	r16,r16,-1
 8008250:	103ff726 	beq	r2,zero,8008230 <_gp+0xffff744c>
 8008254:	00bfffc4 	movi	r2,-1
 8008258:	00000106 	br	8008260 <print_repeat+0x54>
 800825c:	0005883a 	mov	r2,zero
 8008260:	dfc00417 	ldw	ra,16(sp)
 8008264:	dc800317 	ldw	r18,12(sp)
 8008268:	dc400217 	ldw	r17,8(sp)
 800826c:	dc000117 	ldw	r16,4(sp)
 8008270:	dec00504 	addi	sp,sp,20
 8008274:	f800283a 	ret

08008278 <___vfprintf_internal_r>:
 8008278:	deffe504 	addi	sp,sp,-108
 800827c:	d8c00804 	addi	r3,sp,32
 8008280:	df001915 	stw	fp,100(sp)
 8008284:	ddc01815 	stw	r23,96(sp)
 8008288:	dd801715 	stw	r22,92(sp)
 800828c:	dd401615 	stw	r21,88(sp)
 8008290:	dd001515 	stw	r20,84(sp)
 8008294:	dcc01415 	stw	r19,80(sp)
 8008298:	dc801315 	stw	r18,76(sp)
 800829c:	dc401215 	stw	r17,72(sp)
 80082a0:	dc001115 	stw	r16,68(sp)
 80082a4:	dfc01a15 	stw	ra,104(sp)
 80082a8:	2027883a 	mov	r19,r4
 80082ac:	2839883a 	mov	fp,r5
 80082b0:	382d883a 	mov	r22,r7
 80082b4:	d9800f15 	stw	r6,60(sp)
 80082b8:	0021883a 	mov	r16,zero
 80082bc:	d8000e15 	stw	zero,56(sp)
 80082c0:	002f883a 	mov	r23,zero
 80082c4:	002b883a 	mov	r21,zero
 80082c8:	0025883a 	mov	r18,zero
 80082cc:	0023883a 	mov	r17,zero
 80082d0:	d8000c15 	stw	zero,48(sp)
 80082d4:	d8000b15 	stw	zero,44(sp)
 80082d8:	0029883a 	mov	r20,zero
 80082dc:	d8c00915 	stw	r3,36(sp)
 80082e0:	d8c00f17 	ldw	r3,60(sp)
 80082e4:	19000003 	ldbu	r4,0(r3)
 80082e8:	20803fcc 	andi	r2,r4,255
 80082ec:	1080201c 	xori	r2,r2,128
 80082f0:	10bfe004 	addi	r2,r2,-128
 80082f4:	10011c26 	beq	r2,zero,8008768 <___vfprintf_internal_r+0x4f0>
 80082f8:	00c00044 	movi	r3,1
 80082fc:	a0c01426 	beq	r20,r3,8008350 <___vfprintf_internal_r+0xd8>
 8008300:	1d000216 	blt	r3,r20,800830c <___vfprintf_internal_r+0x94>
 8008304:	a0000626 	beq	r20,zero,8008320 <___vfprintf_internal_r+0xa8>
 8008308:	00011306 	br	8008758 <___vfprintf_internal_r+0x4e0>
 800830c:	01400084 	movi	r5,2
 8008310:	a1401d26 	beq	r20,r5,8008388 <___vfprintf_internal_r+0x110>
 8008314:	014000c4 	movi	r5,3
 8008318:	a1402926 	beq	r20,r5,80083c0 <___vfprintf_internal_r+0x148>
 800831c:	00010e06 	br	8008758 <___vfprintf_internal_r+0x4e0>
 8008320:	01400944 	movi	r5,37
 8008324:	1140fb26 	beq	r2,r5,8008714 <___vfprintf_internal_r+0x49c>
 8008328:	e0800117 	ldw	r2,4(fp)
 800832c:	d9000005 	stb	r4,0(sp)
 8008330:	01c00044 	movi	r7,1
 8008334:	d80d883a 	mov	r6,sp
 8008338:	e00b883a 	mov	r5,fp
 800833c:	9809883a 	mov	r4,r19
 8008340:	103ee83a 	callr	r2
 8008344:	1000d61e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 8008348:	84000044 	addi	r16,r16,1
 800834c:	00010206 	br	8008758 <___vfprintf_internal_r+0x4e0>
 8008350:	01400c04 	movi	r5,48
 8008354:	1140f826 	beq	r2,r5,8008738 <___vfprintf_internal_r+0x4c0>
 8008358:	01400944 	movi	r5,37
 800835c:	11400a1e 	bne	r2,r5,8008388 <___vfprintf_internal_r+0x110>
 8008360:	d8800005 	stb	r2,0(sp)
 8008364:	e0800117 	ldw	r2,4(fp)
 8008368:	a00f883a 	mov	r7,r20
 800836c:	d80d883a 	mov	r6,sp
 8008370:	e00b883a 	mov	r5,fp
 8008374:	9809883a 	mov	r4,r19
 8008378:	103ee83a 	callr	r2
 800837c:	1000c81e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 8008380:	84000044 	addi	r16,r16,1
 8008384:	0000f306 	br	8008754 <___vfprintf_internal_r+0x4dc>
 8008388:	217ff404 	addi	r5,r4,-48
 800838c:	29403fcc 	andi	r5,r5,255
 8008390:	00c00244 	movi	r3,9
 8008394:	19400736 	bltu	r3,r5,80083b4 <___vfprintf_internal_r+0x13c>
 8008398:	00bfffc4 	movi	r2,-1
 800839c:	88800226 	beq	r17,r2,80083a8 <___vfprintf_internal_r+0x130>
 80083a0:	8c4002a4 	muli	r17,r17,10
 80083a4:	00000106 	br	80083ac <___vfprintf_internal_r+0x134>
 80083a8:	0023883a 	mov	r17,zero
 80083ac:	2c63883a 	add	r17,r5,r17
 80083b0:	0000e206 	br	800873c <___vfprintf_internal_r+0x4c4>
 80083b4:	01400b84 	movi	r5,46
 80083b8:	1140e426 	beq	r2,r5,800874c <___vfprintf_internal_r+0x4d4>
 80083bc:	05000084 	movi	r20,2
 80083c0:	213ff404 	addi	r4,r4,-48
 80083c4:	21003fcc 	andi	r4,r4,255
 80083c8:	00c00244 	movi	r3,9
 80083cc:	19000736 	bltu	r3,r4,80083ec <___vfprintf_internal_r+0x174>
 80083d0:	00bfffc4 	movi	r2,-1
 80083d4:	90800226 	beq	r18,r2,80083e0 <___vfprintf_internal_r+0x168>
 80083d8:	948002a4 	muli	r18,r18,10
 80083dc:	00000106 	br	80083e4 <___vfprintf_internal_r+0x16c>
 80083e0:	0025883a 	mov	r18,zero
 80083e4:	24a5883a 	add	r18,r4,r18
 80083e8:	0000db06 	br	8008758 <___vfprintf_internal_r+0x4e0>
 80083ec:	00c01b04 	movi	r3,108
 80083f0:	10c0d426 	beq	r2,r3,8008744 <___vfprintf_internal_r+0x4cc>
 80083f4:	013fffc4 	movi	r4,-1
 80083f8:	91000226 	beq	r18,r4,8008404 <___vfprintf_internal_r+0x18c>
 80083fc:	d8000b15 	stw	zero,44(sp)
 8008400:	00000106 	br	8008408 <___vfprintf_internal_r+0x190>
 8008404:	04800044 	movi	r18,1
 8008408:	01001a44 	movi	r4,105
 800840c:	11001626 	beq	r2,r4,8008468 <___vfprintf_internal_r+0x1f0>
 8008410:	20800916 	blt	r4,r2,8008438 <___vfprintf_internal_r+0x1c0>
 8008414:	010018c4 	movi	r4,99
 8008418:	11008a26 	beq	r2,r4,8008644 <___vfprintf_internal_r+0x3cc>
 800841c:	01001904 	movi	r4,100
 8008420:	11001126 	beq	r2,r4,8008468 <___vfprintf_internal_r+0x1f0>
 8008424:	01001604 	movi	r4,88
 8008428:	1100ca1e 	bne	r2,r4,8008754 <___vfprintf_internal_r+0x4dc>
 800842c:	00c00044 	movi	r3,1
 8008430:	d8c00e15 	stw	r3,56(sp)
 8008434:	00001406 	br	8008488 <___vfprintf_internal_r+0x210>
 8008438:	01001cc4 	movi	r4,115
 800843c:	11009a26 	beq	r2,r4,80086a8 <___vfprintf_internal_r+0x430>
 8008440:	20800416 	blt	r4,r2,8008454 <___vfprintf_internal_r+0x1dc>
 8008444:	01001bc4 	movi	r4,111
 8008448:	1100c21e 	bne	r2,r4,8008754 <___vfprintf_internal_r+0x4dc>
 800844c:	05400204 	movi	r21,8
 8008450:	00000e06 	br	800848c <___vfprintf_internal_r+0x214>
 8008454:	01001d44 	movi	r4,117
 8008458:	11000c26 	beq	r2,r4,800848c <___vfprintf_internal_r+0x214>
 800845c:	01001e04 	movi	r4,120
 8008460:	11000926 	beq	r2,r4,8008488 <___vfprintf_internal_r+0x210>
 8008464:	0000bb06 	br	8008754 <___vfprintf_internal_r+0x4dc>
 8008468:	b5000104 	addi	r20,r22,4
 800846c:	b8000726 	beq	r23,zero,800848c <___vfprintf_internal_r+0x214>
 8008470:	dd000d15 	stw	r20,52(sp)
 8008474:	b5800017 	ldw	r22,0(r22)
 8008478:	b000080e 	bge	r22,zero,800849c <___vfprintf_internal_r+0x224>
 800847c:	05adc83a 	sub	r22,zero,r22
 8008480:	02800044 	movi	r10,1
 8008484:	00000606 	br	80084a0 <___vfprintf_internal_r+0x228>
 8008488:	05400404 	movi	r21,16
 800848c:	b0c00104 	addi	r3,r22,4
 8008490:	d8c00d15 	stw	r3,52(sp)
 8008494:	b5800017 	ldw	r22,0(r22)
 8008498:	002f883a 	mov	r23,zero
 800849c:	0015883a 	mov	r10,zero
 80084a0:	d829883a 	mov	r20,sp
 80084a4:	b0001426 	beq	r22,zero,80084f8 <___vfprintf_internal_r+0x280>
 80084a8:	b009883a 	mov	r4,r22
 80084ac:	a80b883a 	mov	r5,r21
 80084b0:	da801015 	stw	r10,64(sp)
 80084b4:	80089c00 	call	80089c0 <__udivsi3>
 80084b8:	1549383a 	mul	r4,r2,r21
 80084bc:	00c00244 	movi	r3,9
 80084c0:	da801017 	ldw	r10,64(sp)
 80084c4:	b12dc83a 	sub	r22,r22,r4
 80084c8:	1d800216 	blt	r3,r22,80084d4 <___vfprintf_internal_r+0x25c>
 80084cc:	b5800c04 	addi	r22,r22,48
 80084d0:	00000506 	br	80084e8 <___vfprintf_internal_r+0x270>
 80084d4:	d8c00e17 	ldw	r3,56(sp)
 80084d8:	18000226 	beq	r3,zero,80084e4 <___vfprintf_internal_r+0x26c>
 80084dc:	b5800dc4 	addi	r22,r22,55
 80084e0:	00000106 	br	80084e8 <___vfprintf_internal_r+0x270>
 80084e4:	b58015c4 	addi	r22,r22,87
 80084e8:	a5800005 	stb	r22,0(r20)
 80084ec:	a5000044 	addi	r20,r20,1
 80084f0:	102d883a 	mov	r22,r2
 80084f4:	003feb06 	br	80084a4 <_gp+0xffff76c0>
 80084f8:	a6c7c83a 	sub	r3,r20,sp
 80084fc:	d8c00a15 	stw	r3,40(sp)
 8008500:	90c5c83a 	sub	r2,r18,r3
 8008504:	00800a0e 	bge	zero,r2,8008530 <___vfprintf_internal_r+0x2b8>
 8008508:	a085883a 	add	r2,r20,r2
 800850c:	01400c04 	movi	r5,48
 8008510:	d8c00917 	ldw	r3,36(sp)
 8008514:	a009883a 	mov	r4,r20
 8008518:	a0c0032e 	bgeu	r20,r3,8008528 <___vfprintf_internal_r+0x2b0>
 800851c:	a5000044 	addi	r20,r20,1
 8008520:	21400005 	stb	r5,0(r4)
 8008524:	a0bffa1e 	bne	r20,r2,8008510 <_gp+0xffff772c>
 8008528:	a6c7c83a 	sub	r3,r20,sp
 800852c:	d8c00a15 	stw	r3,40(sp)
 8008530:	d8c00a17 	ldw	r3,40(sp)
 8008534:	50d3883a 	add	r9,r10,r3
 8008538:	d8c00b17 	ldw	r3,44(sp)
 800853c:	8a6dc83a 	sub	r22,r17,r9
 8008540:	18001726 	beq	r3,zero,80085a0 <___vfprintf_internal_r+0x328>
 8008544:	50000a26 	beq	r10,zero,8008570 <___vfprintf_internal_r+0x2f8>
 8008548:	00800b44 	movi	r2,45
 800854c:	d8800805 	stb	r2,32(sp)
 8008550:	e0800117 	ldw	r2,4(fp)
 8008554:	01c00044 	movi	r7,1
 8008558:	d9800804 	addi	r6,sp,32
 800855c:	e00b883a 	mov	r5,fp
 8008560:	9809883a 	mov	r4,r19
 8008564:	103ee83a 	callr	r2
 8008568:	10004d1e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 800856c:	84000044 	addi	r16,r16,1
 8008570:	0580070e 	bge	zero,r22,8008590 <___vfprintf_internal_r+0x318>
 8008574:	b00f883a 	mov	r7,r22
 8008578:	01800c04 	movi	r6,48
 800857c:	e00b883a 	mov	r5,fp
 8008580:	9809883a 	mov	r4,r19
 8008584:	800820c0 	call	800820c <print_repeat>
 8008588:	1000451e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 800858c:	85a1883a 	add	r16,r16,r22
 8008590:	d8c00a17 	ldw	r3,40(sp)
 8008594:	a013883a 	mov	r9,r20
 8008598:	1d2dc83a 	sub	r22,r3,r20
 800859c:	00002206 	br	8008628 <___vfprintf_internal_r+0x3b0>
 80085a0:	0580090e 	bge	zero,r22,80085c8 <___vfprintf_internal_r+0x350>
 80085a4:	b00f883a 	mov	r7,r22
 80085a8:	01800804 	movi	r6,32
 80085ac:	e00b883a 	mov	r5,fp
 80085b0:	9809883a 	mov	r4,r19
 80085b4:	da801015 	stw	r10,64(sp)
 80085b8:	800820c0 	call	800820c <print_repeat>
 80085bc:	da801017 	ldw	r10,64(sp)
 80085c0:	1000371e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 80085c4:	85a1883a 	add	r16,r16,r22
 80085c8:	503ff126 	beq	r10,zero,8008590 <_gp+0xffff77ac>
 80085cc:	00800b44 	movi	r2,45
 80085d0:	d8800805 	stb	r2,32(sp)
 80085d4:	e0800117 	ldw	r2,4(fp)
 80085d8:	01c00044 	movi	r7,1
 80085dc:	d9800804 	addi	r6,sp,32
 80085e0:	e00b883a 	mov	r5,fp
 80085e4:	9809883a 	mov	r4,r19
 80085e8:	103ee83a 	callr	r2
 80085ec:	10002c1e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 80085f0:	84000044 	addi	r16,r16,1
 80085f4:	003fe606 	br	8008590 <_gp+0xffff77ac>
 80085f8:	4a7fffc4 	addi	r9,r9,-1
 80085fc:	48800003 	ldbu	r2,0(r9)
 8008600:	01c00044 	movi	r7,1
 8008604:	d9800804 	addi	r6,sp,32
 8008608:	d8800805 	stb	r2,32(sp)
 800860c:	e0800117 	ldw	r2,4(fp)
 8008610:	e00b883a 	mov	r5,fp
 8008614:	da401015 	stw	r9,64(sp)
 8008618:	9809883a 	mov	r4,r19
 800861c:	103ee83a 	callr	r2
 8008620:	da401017 	ldw	r9,64(sp)
 8008624:	10001e1e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 8008628:	8245c83a 	sub	r2,r16,r9
 800862c:	4d89883a 	add	r4,r9,r22
 8008630:	a085883a 	add	r2,r20,r2
 8008634:	013ff016 	blt	zero,r4,80085f8 <_gp+0xffff7814>
 8008638:	1021883a 	mov	r16,r2
 800863c:	dd800d17 	ldw	r22,52(sp)
 8008640:	00004406 	br	8008754 <___vfprintf_internal_r+0x4dc>
 8008644:	00800044 	movi	r2,1
 8008648:	1440080e 	bge	r2,r17,800866c <___vfprintf_internal_r+0x3f4>
 800864c:	8d3fffc4 	addi	r20,r17,-1
 8008650:	a00f883a 	mov	r7,r20
 8008654:	01800804 	movi	r6,32
 8008658:	e00b883a 	mov	r5,fp
 800865c:	9809883a 	mov	r4,r19
 8008660:	800820c0 	call	800820c <print_repeat>
 8008664:	10000e1e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 8008668:	8521883a 	add	r16,r16,r20
 800866c:	b0800017 	ldw	r2,0(r22)
 8008670:	01c00044 	movi	r7,1
 8008674:	d80d883a 	mov	r6,sp
 8008678:	d8800005 	stb	r2,0(sp)
 800867c:	e0800117 	ldw	r2,4(fp)
 8008680:	e00b883a 	mov	r5,fp
 8008684:	9809883a 	mov	r4,r19
 8008688:	b5000104 	addi	r20,r22,4
 800868c:	103ee83a 	callr	r2
 8008690:	1000031e 	bne	r2,zero,80086a0 <___vfprintf_internal_r+0x428>
 8008694:	84000044 	addi	r16,r16,1
 8008698:	a02d883a 	mov	r22,r20
 800869c:	00002d06 	br	8008754 <___vfprintf_internal_r+0x4dc>
 80086a0:	00bfffc4 	movi	r2,-1
 80086a4:	00003106 	br	800876c <___vfprintf_internal_r+0x4f4>
 80086a8:	b5000017 	ldw	r20,0(r22)
 80086ac:	b0c00104 	addi	r3,r22,4
 80086b0:	d8c00a15 	stw	r3,40(sp)
 80086b4:	a009883a 	mov	r4,r20
 80086b8:	80081f00 	call	80081f0 <strlen>
 80086bc:	8893c83a 	sub	r9,r17,r2
 80086c0:	102d883a 	mov	r22,r2
 80086c4:	0240090e 	bge	zero,r9,80086ec <___vfprintf_internal_r+0x474>
 80086c8:	480f883a 	mov	r7,r9
 80086cc:	01800804 	movi	r6,32
 80086d0:	e00b883a 	mov	r5,fp
 80086d4:	9809883a 	mov	r4,r19
 80086d8:	da401015 	stw	r9,64(sp)
 80086dc:	800820c0 	call	800820c <print_repeat>
 80086e0:	da401017 	ldw	r9,64(sp)
 80086e4:	103fee1e 	bne	r2,zero,80086a0 <_gp+0xffff78bc>
 80086e8:	8261883a 	add	r16,r16,r9
 80086ec:	e0800117 	ldw	r2,4(fp)
 80086f0:	b00f883a 	mov	r7,r22
 80086f4:	a00d883a 	mov	r6,r20
 80086f8:	e00b883a 	mov	r5,fp
 80086fc:	9809883a 	mov	r4,r19
 8008700:	103ee83a 	callr	r2
 8008704:	103fe61e 	bne	r2,zero,80086a0 <_gp+0xffff78bc>
 8008708:	85a1883a 	add	r16,r16,r22
 800870c:	dd800a17 	ldw	r22,40(sp)
 8008710:	00001006 	br	8008754 <___vfprintf_internal_r+0x4dc>
 8008714:	05c00044 	movi	r23,1
 8008718:	04bfffc4 	movi	r18,-1
 800871c:	d8000e15 	stw	zero,56(sp)
 8008720:	05400284 	movi	r21,10
 8008724:	9023883a 	mov	r17,r18
 8008728:	d8000c15 	stw	zero,48(sp)
 800872c:	d8000b15 	stw	zero,44(sp)
 8008730:	b829883a 	mov	r20,r23
 8008734:	00000806 	br	8008758 <___vfprintf_internal_r+0x4e0>
 8008738:	dd000b15 	stw	r20,44(sp)
 800873c:	05000084 	movi	r20,2
 8008740:	00000506 	br	8008758 <___vfprintf_internal_r+0x4e0>
 8008744:	00c00044 	movi	r3,1
 8008748:	d8c00c15 	stw	r3,48(sp)
 800874c:	050000c4 	movi	r20,3
 8008750:	00000106 	br	8008758 <___vfprintf_internal_r+0x4e0>
 8008754:	0029883a 	mov	r20,zero
 8008758:	d8c00f17 	ldw	r3,60(sp)
 800875c:	18c00044 	addi	r3,r3,1
 8008760:	d8c00f15 	stw	r3,60(sp)
 8008764:	003ede06 	br	80082e0 <_gp+0xffff74fc>
 8008768:	8005883a 	mov	r2,r16
 800876c:	dfc01a17 	ldw	ra,104(sp)
 8008770:	df001917 	ldw	fp,100(sp)
 8008774:	ddc01817 	ldw	r23,96(sp)
 8008778:	dd801717 	ldw	r22,92(sp)
 800877c:	dd401617 	ldw	r21,88(sp)
 8008780:	dd001517 	ldw	r20,84(sp)
 8008784:	dcc01417 	ldw	r19,80(sp)
 8008788:	dc801317 	ldw	r18,76(sp)
 800878c:	dc401217 	ldw	r17,72(sp)
 8008790:	dc001117 	ldw	r16,68(sp)
 8008794:	dec01b04 	addi	sp,sp,108
 8008798:	f800283a 	ret

0800879c <__vfprintf_internal>:
 800879c:	00820074 	movhi	r2,2049
 80087a0:	10a37a04 	addi	r2,r2,-29208
 80087a4:	300f883a 	mov	r7,r6
 80087a8:	280d883a 	mov	r6,r5
 80087ac:	200b883a 	mov	r5,r4
 80087b0:	11000017 	ldw	r4,0(r2)
 80087b4:	80082781 	jmpi	8008278 <___vfprintf_internal_r>

080087b8 <__sfvwrite_small_dev>:
 80087b8:	2880000b 	ldhu	r2,0(r5)
 80087bc:	1080020c 	andi	r2,r2,8
 80087c0:	10002126 	beq	r2,zero,8008848 <__sfvwrite_small_dev+0x90>
 80087c4:	2880008f 	ldh	r2,2(r5)
 80087c8:	defffa04 	addi	sp,sp,-24
 80087cc:	dc000015 	stw	r16,0(sp)
 80087d0:	dfc00515 	stw	ra,20(sp)
 80087d4:	dd000415 	stw	r20,16(sp)
 80087d8:	dcc00315 	stw	r19,12(sp)
 80087dc:	dc800215 	stw	r18,8(sp)
 80087e0:	dc400115 	stw	r17,4(sp)
 80087e4:	2821883a 	mov	r16,r5
 80087e8:	10001216 	blt	r2,zero,8008834 <__sfvwrite_small_dev+0x7c>
 80087ec:	2027883a 	mov	r19,r4
 80087f0:	3025883a 	mov	r18,r6
 80087f4:	3823883a 	mov	r17,r7
 80087f8:	05010004 	movi	r20,1024
 80087fc:	04400b0e 	bge	zero,r17,800882c <__sfvwrite_small_dev+0x74>
 8008800:	880f883a 	mov	r7,r17
 8008804:	a440010e 	bge	r20,r17,800880c <__sfvwrite_small_dev+0x54>
 8008808:	01c10004 	movi	r7,1024
 800880c:	8140008f 	ldh	r5,2(r16)
 8008810:	900d883a 	mov	r6,r18
 8008814:	9809883a 	mov	r4,r19
 8008818:	80088700 	call	8008870 <_write_r>
 800881c:	0080050e 	bge	zero,r2,8008834 <__sfvwrite_small_dev+0x7c>
 8008820:	88a3c83a 	sub	r17,r17,r2
 8008824:	90a5883a 	add	r18,r18,r2
 8008828:	003ff406 	br	80087fc <_gp+0xffff7a18>
 800882c:	0005883a 	mov	r2,zero
 8008830:	00000706 	br	8008850 <__sfvwrite_small_dev+0x98>
 8008834:	8080000b 	ldhu	r2,0(r16)
 8008838:	10801014 	ori	r2,r2,64
 800883c:	8080000d 	sth	r2,0(r16)
 8008840:	00bfffc4 	movi	r2,-1
 8008844:	00000206 	br	8008850 <__sfvwrite_small_dev+0x98>
 8008848:	00bfffc4 	movi	r2,-1
 800884c:	f800283a 	ret
 8008850:	dfc00517 	ldw	ra,20(sp)
 8008854:	dd000417 	ldw	r20,16(sp)
 8008858:	dcc00317 	ldw	r19,12(sp)
 800885c:	dc800217 	ldw	r18,8(sp)
 8008860:	dc400117 	ldw	r17,4(sp)
 8008864:	dc000017 	ldw	r16,0(sp)
 8008868:	dec00604 	addi	sp,sp,24
 800886c:	f800283a 	ret

08008870 <_write_r>:
 8008870:	defffd04 	addi	sp,sp,-12
 8008874:	dc000015 	stw	r16,0(sp)
 8008878:	04020074 	movhi	r16,2049
 800887c:	dc400115 	stw	r17,4(sp)
 8008880:	8423b904 	addi	r16,r16,-28956
 8008884:	2023883a 	mov	r17,r4
 8008888:	2809883a 	mov	r4,r5
 800888c:	300b883a 	mov	r5,r6
 8008890:	380d883a 	mov	r6,r7
 8008894:	dfc00215 	stw	ra,8(sp)
 8008898:	80000015 	stw	zero,0(r16)
 800889c:	8008b880 	call	8008b88 <write>
 80088a0:	00ffffc4 	movi	r3,-1
 80088a4:	10c0031e 	bne	r2,r3,80088b4 <_write_r+0x44>
 80088a8:	80c00017 	ldw	r3,0(r16)
 80088ac:	18000126 	beq	r3,zero,80088b4 <_write_r+0x44>
 80088b0:	88c00015 	stw	r3,0(r17)
 80088b4:	dfc00217 	ldw	ra,8(sp)
 80088b8:	dc400117 	ldw	r17,4(sp)
 80088bc:	dc000017 	ldw	r16,0(sp)
 80088c0:	dec00304 	addi	sp,sp,12
 80088c4:	f800283a 	ret

080088c8 <__divsi3>:
 80088c8:	20001b16 	blt	r4,zero,8008938 <__divsi3+0x70>
 80088cc:	000f883a 	mov	r7,zero
 80088d0:	28001616 	blt	r5,zero,800892c <__divsi3+0x64>
 80088d4:	200d883a 	mov	r6,r4
 80088d8:	29001a2e 	bgeu	r5,r4,8008944 <__divsi3+0x7c>
 80088dc:	00800804 	movi	r2,32
 80088e0:	00c00044 	movi	r3,1
 80088e4:	00000106 	br	80088ec <__divsi3+0x24>
 80088e8:	10000d26 	beq	r2,zero,8008920 <__divsi3+0x58>
 80088ec:	294b883a 	add	r5,r5,r5
 80088f0:	10bfffc4 	addi	r2,r2,-1
 80088f4:	18c7883a 	add	r3,r3,r3
 80088f8:	293ffb36 	bltu	r5,r4,80088e8 <_gp+0xffff7b04>
 80088fc:	0005883a 	mov	r2,zero
 8008900:	18000726 	beq	r3,zero,8008920 <__divsi3+0x58>
 8008904:	0005883a 	mov	r2,zero
 8008908:	31400236 	bltu	r6,r5,8008914 <__divsi3+0x4c>
 800890c:	314dc83a 	sub	r6,r6,r5
 8008910:	10c4b03a 	or	r2,r2,r3
 8008914:	1806d07a 	srli	r3,r3,1
 8008918:	280ad07a 	srli	r5,r5,1
 800891c:	183ffa1e 	bne	r3,zero,8008908 <_gp+0xffff7b24>
 8008920:	38000126 	beq	r7,zero,8008928 <__divsi3+0x60>
 8008924:	0085c83a 	sub	r2,zero,r2
 8008928:	f800283a 	ret
 800892c:	014bc83a 	sub	r5,zero,r5
 8008930:	39c0005c 	xori	r7,r7,1
 8008934:	003fe706 	br	80088d4 <_gp+0xffff7af0>
 8008938:	0109c83a 	sub	r4,zero,r4
 800893c:	01c00044 	movi	r7,1
 8008940:	003fe306 	br	80088d0 <_gp+0xffff7aec>
 8008944:	00c00044 	movi	r3,1
 8008948:	003fee06 	br	8008904 <_gp+0xffff7b20>

0800894c <__modsi3>:
 800894c:	20001716 	blt	r4,zero,80089ac <__modsi3+0x60>
 8008950:	000f883a 	mov	r7,zero
 8008954:	2005883a 	mov	r2,r4
 8008958:	28001216 	blt	r5,zero,80089a4 <__modsi3+0x58>
 800895c:	2900162e 	bgeu	r5,r4,80089b8 <__modsi3+0x6c>
 8008960:	01800804 	movi	r6,32
 8008964:	00c00044 	movi	r3,1
 8008968:	00000106 	br	8008970 <__modsi3+0x24>
 800896c:	30000a26 	beq	r6,zero,8008998 <__modsi3+0x4c>
 8008970:	294b883a 	add	r5,r5,r5
 8008974:	31bfffc4 	addi	r6,r6,-1
 8008978:	18c7883a 	add	r3,r3,r3
 800897c:	293ffb36 	bltu	r5,r4,800896c <_gp+0xffff7b88>
 8008980:	18000526 	beq	r3,zero,8008998 <__modsi3+0x4c>
 8008984:	1806d07a 	srli	r3,r3,1
 8008988:	11400136 	bltu	r2,r5,8008990 <__modsi3+0x44>
 800898c:	1145c83a 	sub	r2,r2,r5
 8008990:	280ad07a 	srli	r5,r5,1
 8008994:	183ffb1e 	bne	r3,zero,8008984 <_gp+0xffff7ba0>
 8008998:	38000126 	beq	r7,zero,80089a0 <__modsi3+0x54>
 800899c:	0085c83a 	sub	r2,zero,r2
 80089a0:	f800283a 	ret
 80089a4:	014bc83a 	sub	r5,zero,r5
 80089a8:	003fec06 	br	800895c <_gp+0xffff7b78>
 80089ac:	0109c83a 	sub	r4,zero,r4
 80089b0:	01c00044 	movi	r7,1
 80089b4:	003fe706 	br	8008954 <_gp+0xffff7b70>
 80089b8:	00c00044 	movi	r3,1
 80089bc:	003ff106 	br	8008984 <_gp+0xffff7ba0>

080089c0 <__udivsi3>:
 80089c0:	200d883a 	mov	r6,r4
 80089c4:	2900152e 	bgeu	r5,r4,8008a1c <__udivsi3+0x5c>
 80089c8:	28001416 	blt	r5,zero,8008a1c <__udivsi3+0x5c>
 80089cc:	00800804 	movi	r2,32
 80089d0:	00c00044 	movi	r3,1
 80089d4:	00000206 	br	80089e0 <__udivsi3+0x20>
 80089d8:	10000e26 	beq	r2,zero,8008a14 <__udivsi3+0x54>
 80089dc:	28000516 	blt	r5,zero,80089f4 <__udivsi3+0x34>
 80089e0:	294b883a 	add	r5,r5,r5
 80089e4:	10bfffc4 	addi	r2,r2,-1
 80089e8:	18c7883a 	add	r3,r3,r3
 80089ec:	293ffa36 	bltu	r5,r4,80089d8 <_gp+0xffff7bf4>
 80089f0:	18000826 	beq	r3,zero,8008a14 <__udivsi3+0x54>
 80089f4:	0005883a 	mov	r2,zero
 80089f8:	31400236 	bltu	r6,r5,8008a04 <__udivsi3+0x44>
 80089fc:	314dc83a 	sub	r6,r6,r5
 8008a00:	10c4b03a 	or	r2,r2,r3
 8008a04:	1806d07a 	srli	r3,r3,1
 8008a08:	280ad07a 	srli	r5,r5,1
 8008a0c:	183ffa1e 	bne	r3,zero,80089f8 <_gp+0xffff7c14>
 8008a10:	f800283a 	ret
 8008a14:	0005883a 	mov	r2,zero
 8008a18:	f800283a 	ret
 8008a1c:	00c00044 	movi	r3,1
 8008a20:	003ff406 	br	80089f4 <_gp+0xffff7c10>

08008a24 <__umodsi3>:
 8008a24:	2005883a 	mov	r2,r4
 8008a28:	2900122e 	bgeu	r5,r4,8008a74 <__umodsi3+0x50>
 8008a2c:	28001116 	blt	r5,zero,8008a74 <__umodsi3+0x50>
 8008a30:	01800804 	movi	r6,32
 8008a34:	00c00044 	movi	r3,1
 8008a38:	00000206 	br	8008a44 <__umodsi3+0x20>
 8008a3c:	30000c26 	beq	r6,zero,8008a70 <__umodsi3+0x4c>
 8008a40:	28000516 	blt	r5,zero,8008a58 <__umodsi3+0x34>
 8008a44:	294b883a 	add	r5,r5,r5
 8008a48:	31bfffc4 	addi	r6,r6,-1
 8008a4c:	18c7883a 	add	r3,r3,r3
 8008a50:	293ffa36 	bltu	r5,r4,8008a3c <_gp+0xffff7c58>
 8008a54:	18000626 	beq	r3,zero,8008a70 <__umodsi3+0x4c>
 8008a58:	1806d07a 	srli	r3,r3,1
 8008a5c:	11400136 	bltu	r2,r5,8008a64 <__umodsi3+0x40>
 8008a60:	1145c83a 	sub	r2,r2,r5
 8008a64:	280ad07a 	srli	r5,r5,1
 8008a68:	183ffb1e 	bne	r3,zero,8008a58 <_gp+0xffff7c74>
 8008a6c:	f800283a 	ret
 8008a70:	f800283a 	ret
 8008a74:	00c00044 	movi	r3,1
 8008a78:	003ff706 	br	8008a58 <_gp+0xffff7c74>

08008a7c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8008a7c:	deffff04 	addi	sp,sp,-4
 8008a80:	01020074 	movhi	r4,2049
 8008a84:	01420074 	movhi	r5,2049
 8008a88:	dfc00015 	stw	ra,0(sp)
 8008a8c:	21234104 	addi	r4,r4,-29436
 8008a90:	29637d04 	addi	r5,r5,-29196

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8008a94:	2140061e 	bne	r4,r5,8008ab0 <alt_load+0x34>
 8008a98:	01020074 	movhi	r4,2049
 8008a9c:	01420074 	movhi	r5,2049
 8008aa0:	21200804 	addi	r4,r4,-32736
 8008aa4:	29600804 	addi	r5,r5,-32736
 8008aa8:	2140121e 	bne	r4,r5,8008af4 <alt_load+0x78>
 8008aac:	00000b06 	br	8008adc <alt_load+0x60>
 8008ab0:	00c20074 	movhi	r3,2049
 8008ab4:	18e37d04 	addi	r3,r3,-29196
 8008ab8:	1907c83a 	sub	r3,r3,r4
 8008abc:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8008ac0:	10fff526 	beq	r2,r3,8008a98 <_gp+0xffff7cb4>
    {
      *to++ = *from++;
 8008ac4:	114f883a 	add	r7,r2,r5
 8008ac8:	39c00017 	ldw	r7,0(r7)
 8008acc:	110d883a 	add	r6,r2,r4
 8008ad0:	10800104 	addi	r2,r2,4
 8008ad4:	31c00015 	stw	r7,0(r6)
 8008ad8:	003ff906 	br	8008ac0 <_gp+0xffff7cdc>
 8008adc:	01020074 	movhi	r4,2049
 8008ae0:	01420074 	movhi	r5,2049
 8008ae4:	21232904 	addi	r4,r4,-29532
 8008ae8:	29632904 	addi	r5,r5,-29532

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8008aec:	2140101e 	bne	r4,r5,8008b30 <alt_load+0xb4>
 8008af0:	00000b06 	br	8008b20 <alt_load+0xa4>
 8008af4:	00c20074 	movhi	r3,2049
 8008af8:	18e00804 	addi	r3,r3,-32736
 8008afc:	1907c83a 	sub	r3,r3,r4
 8008b00:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8008b04:	10fff526 	beq	r2,r3,8008adc <_gp+0xffff7cf8>
    {
      *to++ = *from++;
 8008b08:	114f883a 	add	r7,r2,r5
 8008b0c:	39c00017 	ldw	r7,0(r7)
 8008b10:	110d883a 	add	r6,r2,r4
 8008b14:	10800104 	addi	r2,r2,4
 8008b18:	31c00015 	stw	r7,0(r6)
 8008b1c:	003ff906 	br	8008b04 <_gp+0xffff7d20>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8008b20:	8008c400 	call	8008c40 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 8008b24:	dfc00017 	ldw	ra,0(sp)
 8008b28:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 8008b2c:	8008c581 	jmpi	8008c58 <alt_icache_flush_all>
 8008b30:	00c20074 	movhi	r3,2049
 8008b34:	18e34104 	addi	r3,r3,-29436
 8008b38:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8008b3c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8008b40:	18bff726 	beq	r3,r2,8008b20 <_gp+0xffff7d3c>
    {
      *to++ = *from++;
 8008b44:	114f883a 	add	r7,r2,r5
 8008b48:	39c00017 	ldw	r7,0(r7)
 8008b4c:	110d883a 	add	r6,r2,r4
 8008b50:	10800104 	addi	r2,r2,4
 8008b54:	31c00015 	stw	r7,0(r6)
 8008b58:	003ff906 	br	8008b40 <_gp+0xffff7d5c>

08008b5c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8008b5c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8008b60:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8008b64:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8008b68:	8008be80 	call	8008be8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8008b6c:	8008c080 	call	8008c08 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8008b70:	d1a04117 	ldw	r6,-32508(gp)
 8008b74:	d1604217 	ldw	r5,-32504(gp)
 8008b78:	d1204317 	ldw	r4,-32500(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8008b7c:	dfc00017 	ldw	ra,0(sp)
 8008b80:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8008b84:	800806c1 	jmpi	800806c <main>

08008b88 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 8008b88:	00800044 	movi	r2,1
 8008b8c:	20800226 	beq	r4,r2,8008b98 <write+0x10>
 8008b90:	00800084 	movi	r2,2
 8008b94:	2080041e 	bne	r4,r2,8008ba8 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 8008b98:	01020074 	movhi	r4,2049
 8008b9c:	000f883a 	mov	r7,zero
 8008ba0:	21237b04 	addi	r4,r4,-29204
 8008ba4:	8008c0c1 	jmpi	8008c0c <altera_avalon_jtag_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 8008ba8:	d0a00317 	ldw	r2,-32756(gp)
 8008bac:	10000926 	beq	r2,zero,8008bd4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8008bb0:	deffff04 	addi	sp,sp,-4
 8008bb4:	dfc00015 	stw	ra,0(sp)
 8008bb8:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8008bbc:	00c01444 	movi	r3,81
 8008bc0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8008bc4:	00bfffc4 	movi	r2,-1
 8008bc8:	dfc00017 	ldw	ra,0(sp)
 8008bcc:	dec00104 	addi	sp,sp,4
 8008bd0:	f800283a 	ret
 8008bd4:	d0a04004 	addi	r2,gp,-32512
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 8008bd8:	00c01444 	movi	r3,81
 8008bdc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
 8008be0:	00bfffc4 	movi	r2,-1
 8008be4:	f800283a 	ret

08008be8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8008be8:	deffff04 	addi	sp,sp,-4
 8008bec:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 8008bf0:	8008c640 	call	8008c64 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8008bf4:	00800044 	movi	r2,1
 8008bf8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8008bfc:	dfc00017 	ldw	ra,0(sp)
 8008c00:	dec00104 	addi	sp,sp,4
 8008c04:	f800283a 	ret

08008c08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8008c08:	f800283a 	ret

08008c0c <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 8008c0c:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8008c10:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 8008c14:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8008c18:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 8008c1c:	2980072e 	bgeu	r5,r6,8008c3c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8008c20:	38c00037 	ldwio	r3,0(r7)
 8008c24:	18ffffec 	andhi	r3,r3,65535
 8008c28:	183ffc26 	beq	r3,zero,8008c1c <_gp+0xffff7e38>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 8008c2c:	28c00007 	ldb	r3,0(r5)
 8008c30:	20c00035 	stwio	r3,0(r4)
 8008c34:	29400044 	addi	r5,r5,1
 8008c38:	003ff806 	br	8008c1c <_gp+0xffff7e38>

  return count;
}
 8008c3c:	f800283a 	ret

08008c40 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8008c40:	0005883a 	mov	r2,zero
 8008c44:	00c10004 	movi	r3,1024
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8008c48:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8008c4c:	10800804 	addi	r2,r2,32
 8008c50:	10fffd1e 	bne	r2,r3,8008c48 <_gp+0xffff7e64>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8008c54:	f800283a 	ret

08008c58 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8008c58:	01408004 	movi	r5,512
 8008c5c:	0009883a 	mov	r4,zero
 8008c60:	8008c6c1 	jmpi	8008c6c <alt_icache_flush>

08008c64 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8008c64:	000170fa 	wrctl	ienable,zero
 8008c68:	f800283a 	ret

08008c6c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 8008c6c:	00808004 	movi	r2,512
 8008c70:	1140012e 	bgeu	r2,r5,8008c78 <alt_icache_flush+0xc>
 8008c74:	100b883a 	mov	r5,r2
 8008c78:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008c7c:	2005883a 	mov	r2,r4
 8008c80:	1140032e 	bgeu	r2,r5,8008c90 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8008c84:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008c88:	10800804 	addi	r2,r2,32
 8008c8c:	003ffc06 	br	8008c80 <_gp+0xffff7e9c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8008c90:	210007cc 	andi	r4,r4,31
 8008c94:	20000126 	beq	r4,zero,8008c9c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8008c98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8008c9c:	0000203a 	flushp
 8008ca0:	f800283a 	ret
