
nios_hmpsoc.elf:     file format elf32-littlenios2
nios_hmpsoc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08008020

Program Header:
    LOAD off    0x00001000 vaddr 0x08008000 paddr 0x08008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08008020 paddr 0x08008020 align 2**12
         filesz 0x00000298 memsz 0x00000298 flags r-x
    LOAD off    0x000012b8 vaddr 0x080082b8 paddr 0x080082bc align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x000012c0 vaddr 0x080082c0 paddr 0x080082c0 align 2**12
         filesz 0x00000000 memsz 0x0000000c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08008000  08008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  08008020  08008020  000012bc  2**0
                  CONTENTS
  2 .text         00000280  08008020  08008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  080082a0  080082a0  000012a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000004  080082b8  080082bc  000012b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000000c  080082c0  080082c0  000012c0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  080082cc  080082cc  000012bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000012bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000188  00000000  00000000  000012e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00000c2c  00000000  00000000  00001468  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000717  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000007de  00000000  00000000  000027ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000001b0  00000000  00000000  00002f8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000062e  00000000  00000000  0000313c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000172  00000000  00000000  0000376a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00003910  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00004731  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00004734  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00004737  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00004739  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00004742  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0000474b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00004754  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000042  00000000  00000000  0000475e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0007bd8c  00000000  00000000  000047a0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08008000 l    d  .entry	00000000 .entry
08008020 l    d  .exceptions	00000000 .exceptions
08008020 l    d  .text	00000000 .text
080082a0 l    d  .rodata	00000000 .rodata
080082b8 l    d  .rwdata	00000000 .rwdata
080082c0 l    d  .bss	00000000 .bss
080082cc l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_hmpsoc_bsp//obj/HAL/src/crt0.o
08008068 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 strlen.c
08008164 g     F .text	0000002c alt_main
080082bc g       *ABS*	00000000 __flash_rwdata_start
08008190 g     F .text	00000038 alt_putstr
080082b8 g     O .rwdata	00000004 jtag_uart
08008244 g     F .text	00000008 altera_nios2_gen2_irq_init
08008000 g     F .entry	0000001c __reset
08008020 g       *ABS*	00000000 __flash_exceptions_start
080082c4 g     O .bss	00000004 alt_argv
080102b8 g       *ABS*	00000000 _gp
0800824c g     F .text	00000038 alt_icache_flush
080082cc g       *ABS*	00000000 __bss_end
08008220 g     F .text	00000018 alt_dcache_flush_all
080082bc g       *ABS*	00000000 __ram_rwdata_end
08008000 g       *ABS*	00000000 __alt_mem_onchip_memory
080082b8 g       *ABS*	00000000 __ram_rodata_end
080082cc g       *ABS*	00000000 end
0800d000 g       *ABS*	00000000 __alt_stack_pointer
080081ec g     F .text	00000034 altera_avalon_jtag_uart_write
08008020 g     F .text	0000004c _start
080081e8 g     F .text	00000004 alt_sys_init
080082b8 g       *ABS*	00000000 __ram_rwdata_start
080082a0 g       *ABS*	00000000 __ram_rodata_start
080082cc g       *ABS*	00000000 __alt_stack_base
080082c0 g       *ABS*	00000000 __bss_start
0800806c g     F .text	00000018 main
080082c0 g     O .bss	00000004 alt_envp
080082a0 g       *ABS*	00000000 __flash_rodata_start
080081c8 g     F .text	00000020 alt_irq_init
080082c8 g     O .bss	00000004 alt_argc
08008020 g       *ABS*	00000000 __ram_exceptions_start
080082bc g       *ABS*	00000000 _edata
080082cc g       *ABS*	00000000 _end
08008020 g       *ABS*	00000000 __ram_exceptions_end
0800d000 g       *ABS*	00000000 __alt_data_end
0800801c g       .entry	00000000 _exit
08008284 g     F .text	0000001c strlen
08008238 g     F .text	0000000c alt_icache_flush_all
08008084 g     F .text	000000e0 alt_load



Disassembly of section .entry:

08008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8008000:	00808014 	movui	r2,512
#endif

0:
    initi r2
 8008004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8008008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800800c:	00bffd16 	blt	zero,r2,8008004 <_gp+0xffff7d4c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8008010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8008014:	08600814 	ori	at,at,32800
    jmp r1
 8008018:	0800683a 	jmp	at

0800801c <_exit>:
 800801c:	00000000 	call	0 <__alt_mem_onchip_memory-0x8008000>

Disassembly of section .text:

08008020 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8008020:	00810014 	movui	r2,1024
#endif

0:
    initd 0(r2)
 8008024:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8008028:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800802c:	00bffd16 	blt	zero,r2,8008024 <_gp+0xffff7d6c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8008030:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 8008034:	def40014 	ori	sp,sp,53248
    movhi gp, %hi(_gp)
 8008038:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 800803c:	d680ae14 	ori	gp,gp,696
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8008040:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8008044:	10a0b014 	ori	r2,r2,33472

    movhi r3, %hi(__bss_end)
 8008048:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 800804c:	18e0b314 	ori	r3,r3,33484

    beq r2, r3, 1f
 8008050:	10c00326 	beq	r2,r3,8008060 <_start+0x40>

0:
    stw zero, (r2)
 8008054:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8008058:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800805c:	10fffd36 	bltu	r2,r3,8008054 <_gp+0xffff7d9c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8008060:	80080840 	call	8008084 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8008064:	80081640 	call	8008164 <alt_main>

08008068 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8008068:	003fff06 	br	8008068 <_gp+0xffff7db0>

0800806c <main>:

#include "sys/alt_stdio.h"

int main()
{ 
  alt_putstr("Hello from Nios II!\n");
 800806c:	01020074 	movhi	r4,2049
 */

#include "sys/alt_stdio.h"

int main()
{ 
 8008070:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
 8008074:	2120a804 	addi	r4,r4,-32096
 */

#include "sys/alt_stdio.h"

int main()
{ 
 8008078:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
 800807c:	80081900 	call	8008190 <alt_putstr>
 8008080:	003fff06 	br	8008080 <_gp+0xffff7dc8>

08008084 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8008084:	deffff04 	addi	sp,sp,-4
 8008088:	01020074 	movhi	r4,2049
 800808c:	01420074 	movhi	r5,2049
 8008090:	dfc00015 	stw	ra,0(sp)
 8008094:	2120ae04 	addi	r4,r4,-32072
 8008098:	2960af04 	addi	r5,r5,-32068

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 800809c:	2140061e 	bne	r4,r5,80080b8 <alt_load+0x34>
 80080a0:	01020074 	movhi	r4,2049
 80080a4:	01420074 	movhi	r5,2049
 80080a8:	21200804 	addi	r4,r4,-32736
 80080ac:	29600804 	addi	r5,r5,-32736
 80080b0:	2140121e 	bne	r4,r5,80080fc <alt_load+0x78>
 80080b4:	00000b06 	br	80080e4 <alt_load+0x60>
 80080b8:	00c20074 	movhi	r3,2049
 80080bc:	18e0af04 	addi	r3,r3,-32068
 80080c0:	1907c83a 	sub	r3,r3,r4
 80080c4:	0005883a 	mov	r2,zero
  {
    while( to != end )
 80080c8:	10fff526 	beq	r2,r3,80080a0 <_gp+0xffff7de8>
    {
      *to++ = *from++;
 80080cc:	114f883a 	add	r7,r2,r5
 80080d0:	39c00017 	ldw	r7,0(r7)
 80080d4:	110d883a 	add	r6,r2,r4
 80080d8:	10800104 	addi	r2,r2,4
 80080dc:	31c00015 	stw	r7,0(r6)
 80080e0:	003ff906 	br	80080c8 <_gp+0xffff7e10>
 80080e4:	01020074 	movhi	r4,2049
 80080e8:	01420074 	movhi	r5,2049
 80080ec:	2120a804 	addi	r4,r4,-32096
 80080f0:	2960a804 	addi	r5,r5,-32096

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 80080f4:	2140101e 	bne	r4,r5,8008138 <alt_load+0xb4>
 80080f8:	00000b06 	br	8008128 <alt_load+0xa4>
 80080fc:	00c20074 	movhi	r3,2049
 8008100:	18e00804 	addi	r3,r3,-32736
 8008104:	1907c83a 	sub	r3,r3,r4
 8008108:	0005883a 	mov	r2,zero
  {
    while( to != end )
 800810c:	10fff526 	beq	r2,r3,80080e4 <_gp+0xffff7e2c>
    {
      *to++ = *from++;
 8008110:	114f883a 	add	r7,r2,r5
 8008114:	39c00017 	ldw	r7,0(r7)
 8008118:	110d883a 	add	r6,r2,r4
 800811c:	10800104 	addi	r2,r2,4
 8008120:	31c00015 	stw	r7,0(r6)
 8008124:	003ff906 	br	800810c <_gp+0xffff7e54>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8008128:	80082200 	call	8008220 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 800812c:	dfc00017 	ldw	ra,0(sp)
 8008130:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 8008134:	80082381 	jmpi	8008238 <alt_icache_flush_all>
 8008138:	00c20074 	movhi	r3,2049
 800813c:	18e0ae04 	addi	r3,r3,-32072
 8008140:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 8008144:	0005883a 	mov	r2,zero
  {
    while( to != end )
 8008148:	18bff726 	beq	r3,r2,8008128 <_gp+0xffff7e70>
    {
      *to++ = *from++;
 800814c:	114f883a 	add	r7,r2,r5
 8008150:	39c00017 	ldw	r7,0(r7)
 8008154:	110d883a 	add	r6,r2,r4
 8008158:	10800104 	addi	r2,r2,4
 800815c:	31c00015 	stw	r7,0(r6)
 8008160:	003ff906 	br	8008148 <_gp+0xffff7e90>

08008164 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8008164:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8008168:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800816c:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8008170:	80081c80 	call	80081c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8008174:	80081e80 	call	80081e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 8008178:	d1a00217 	ldw	r6,-32760(gp)
 800817c:	d1600317 	ldw	r5,-32756(gp)
 8008180:	d1200417 	ldw	r4,-32752(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 8008184:	dfc00017 	ldw	ra,0(sp)
 8008188:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 800818c:	800806c1 	jmpi	800806c <main>

08008190 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
 8008190:	defffe04 	addi	sp,sp,-8
 8008194:	dc000015 	stw	r16,0(sp)
 8008198:	dfc00115 	stw	ra,4(sp)
 800819c:	2021883a 	mov	r16,r4
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 80081a0:	80082840 	call	8008284 <strlen>
 80081a4:	01020074 	movhi	r4,2049
 80081a8:	000f883a 	mov	r7,zero
 80081ac:	100d883a 	mov	r6,r2
 80081b0:	800b883a 	mov	r5,r16
 80081b4:	2120ae04 	addi	r4,r4,-32072
#else
    return fputs(str, stdout);
#endif
#endif
}
 80081b8:	dfc00117 	ldw	ra,4(sp)
 80081bc:	dc000017 	ldw	r16,0(sp)
 80081c0:	dec00204 	addi	sp,sp,8
#ifdef ALT_SEMIHOSTING
    return write(STDOUT_FILENO,str,strlen(str));
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
 80081c4:	80081ec1 	jmpi	80081ec <altera_avalon_jtag_uart_write>

080081c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80081c8:	deffff04 	addi	sp,sp,-4
 80081cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 80081d0:	80082440 	call	8008244 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80081d4:	00800044 	movi	r2,1
 80081d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80081dc:	dfc00017 	ldw	ra,0(sp)
 80081e0:	dec00104 	addi	sp,sp,4
 80081e4:	f800283a 	ret

080081e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80081e8:	f800283a 	ret

080081ec <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 80081ec:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80081f0:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 80081f4:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 80081f8:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 80081fc:	2980072e 	bgeu	r5,r6,800821c <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 8008200:	38c00037 	ldwio	r3,0(r7)
 8008204:	18ffffec 	andhi	r3,r3,65535
 8008208:	183ffc26 	beq	r3,zero,80081fc <_gp+0xffff7f44>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 800820c:	28c00007 	ldb	r3,0(r5)
 8008210:	20c00035 	stwio	r3,0(r4)
 8008214:	29400044 	addi	r5,r5,1
 8008218:	003ff806 	br	80081fc <_gp+0xffff7f44>

  return count;
}
 800821c:	f800283a 	ret

08008220 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8008220:	0005883a 	mov	r2,zero
 8008224:	00c10004 	movi	r3,1024
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8008228:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 800822c:	10800804 	addi	r2,r2,32
 8008230:	10fffd1e 	bne	r2,r3,8008228 <_gp+0xffff7f70>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8008234:	f800283a 	ret

08008238 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8008238:	01408004 	movi	r5,512
 800823c:	0009883a 	mov	r4,zero
 8008240:	800824c1 	jmpi	800824c <alt_icache_flush>

08008244 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 8008244:	000170fa 	wrctl	ienable,zero
 8008248:	f800283a 	ret

0800824c <alt_icache_flush>:
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 800824c:	00808004 	movi	r2,512
 8008250:	1140012e 	bgeu	r2,r5,8008258 <alt_icache_flush+0xc>
 8008254:	100b883a 	mov	r5,r2
 8008258:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800825c:	2005883a 	mov	r2,r4
 8008260:	1140032e 	bgeu	r2,r5,8008270 <alt_icache_flush+0x24>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8008264:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008268:	10800804 	addi	r2,r2,32
 800826c:	003ffc06 	br	8008260 <_gp+0xffff7fa8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8008270:	210007cc 	andi	r4,r4,31
 8008274:	20000126 	beq	r4,zero,800827c <alt_icache_flush+0x30>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8008278:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800827c:	0000203a 	flushp
 8008280:	f800283a 	ret

08008284 <strlen>:
 8008284:	2005883a 	mov	r2,r4
 8008288:	10c00007 	ldb	r3,0(r2)
 800828c:	18000226 	beq	r3,zero,8008298 <strlen+0x14>
 8008290:	10800044 	addi	r2,r2,1
 8008294:	003ffc06 	br	8008288 <_gp+0xffff7fd0>
 8008298:	1105c83a 	sub	r2,r2,r4
 800829c:	f800283a 	ret
